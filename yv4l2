#!/usr/bin/env python

from videodev2 import *
from utils import *
from videodev2 import __dict__ as v4l2_dict
from vivid import __dict__ as vivid_dict
from video import Video
import options
import re
import sys

(opt, args) = options.parser.parse_args()

class Factory(object):
    def __init__(self):
        self.pixelformat = V4L2_PIX_FMT_YUYV
        self.nframes = 0
        self.delay = 0
        self.width, self.height = 640, 480
        self.stride = 0
        self.field = V4L2_FIELD_ANY
        self.buffer_size = 0
        self.nbufs = 0
        self.fmt_flags = 0
        self.numerator, self.deonminator = 0,0

def main():
    dev = Video(enum_controls=opt.enum_controls)
    if opt.buf_type:
        dev.type = dev.v4l2_buf_type_from_string(opt.buf_type)
        if not dev.type:
            print('Bad buffer type "%s"' % opt.buf_type)
            sys.exit(1)
    else:
        dev.type = dev.cap_get_buf_type(dev.video_querycap())
    if opt.fill_pad:
        dev.fill_mode |= BUFFER_FILL_PADDING
    elif opt.fill_frames:
        dev.fill_mode |= BUFFER_FILL_FRAME
    if dev.fill_mode & BUFFER_FILL_PADDING and dev.memtype != V4L2_MEMORY_USERPTR:
        print("Buffer overrun can only be checked in USERPTR mode.")
        sys.exit(1)
    if opt.capture:
        nframes = opt.capture
    if opt.delay:
        delay = opt.delay
        if delay < 0:
            print("delay time must is a positive number")
            sys.exit(1)
    if opt.file:
        file_ = opt.file

    if isinstance(opt.input, int):
        dev.video_set_input(opt.input)
        ret = dev.video_get_input()
        print("Input %d selected" % ret)
    if opt.nbufs:
        nbufs = opt.nbufs

    if opt.ctrl:
        try:
            id = eval(opt.ctrl)
        except (SyntaxError, NameError):
            if opt.ctrl in v4l2_dict.keys():
                id = v4l2_dict[opt.ctrl]
            elif opt.ctrl in vivid_dict.keys():
                id = vivid_dict[opt.ctrl]
            else:
                print("'%s' is not a right v4l2 control id." % opt.ctrl)
                sys.exit()
        dev.v4l2_print_control(id, opt.menu)
        sys.exit()
    if opt.list_controls or opt.enum_controls:
        if opt.enum_controls:
            print(dev.fd.name + " support v4l2 controls:")
            print('%-40s %08s\t%s' % ("Control Name", "Control Id", "Description"))
        dev.v4l2_list_controls()
        sys.exit()
    elif opt.control:
        dev.set_control(opt.control)
        sys.exit()
    if opt.size:
        try:
            p = re.match("(\d+)x(\d+)", opt.size)
            width, height = p.group(1), p.group(2)
        except Exception as m:
            print("Invalid size '%s'." % opt.size)
            sys.exit(1)
    if opt.time_per_frame:
        try:
            p = re.match("(\d+)/(\d+)", opt.time_per_frame)
            numerator, denominator = p.group(1), p.group(2)
        except Exception as m:
            print("Invalid size '%s'." % opt.time_per_frame)
            sys.exit(1)
    if opt.memtype:
        dev.memtype = V4L2_MEMORY_USERPTR
    if opt.buffer_size:
        buffer_size = opt.buffer_size
    if opt.enum_formats:
        print("- Available formats:")
        dev.video_enum_formats(V4L2_BUF_TYPE_VIDEO_CAPTURE)
        dev.video_enum_formats(V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE)
        dev.video_enum_formats(V4L2_BUF_TYPE_VIDEO_OUTPUT)
        dev.video_enum_formats(V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE)
        dev.video_enum_formats(V4L2_BUF_TYPE_VIDEO_OVERLAY)
        dev.video_enum_formats(V4L2_BUF_TYPE_META_CAPTURE)
    if opt.enum_inputs:
        print("- Available inputs:")
        dev.video_enum_inputs()
    if opt.info:
        if opt.info == 'help':
            list_formats()
            sys.exit()
        if opt.info in img_fmt.keys():
            pixelformat = img_fmt[opt.info][0]
            if not dev.video_set_format(width, height, pixelformat,
                                        stride,buffer_size, field, fmt_flags):
                sys.exit(1)

        else:
            print("Unsupported video format '%s'." % m.args[0])
            sys.exit(1)

    if opt.pause:
        try:
            input("Press enter to start capture\n")
        except NameError:
            raw_input("Press enter to start capture\n")

    dev.video_get_format()

if __name__ == "__main__":
    main()
