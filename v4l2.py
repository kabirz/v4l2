#!/usr/bin/env python
import ctypes
import ioctl

# linux/v4l2-common.h
V4L2_SEL_TGT_CROP                   = 0x0000
V4L2_SEL_TGT_CROP_DEFAULT           = 0x0001
V4L2_SEL_TGT_CROP_BOUNDS            = 0x0002
V4L2_SEL_TGT_NATIVE_SIZE            = 0x0003
V4L2_SEL_TGT_COMPOSE                = 0x0100
V4L2_SEL_TGT_COMPOSE_DEFAULT        = 0x0101
V4L2_SEL_TGT_COMPOSE_BOUNDS         = 0x0102
V4L2_SEL_TGT_COMPOSE_PADDED         = 0x0103

V4L2_SEL_TGT_CROP_ACTIVE            = V4L2_SEL_TGT_CROP
V4L2_SEL_TGT_COMPOSE_ACTIVE         = V4L2_SEL_TGT_COMPOSE
V4L2_SUBDEV_SEL_TGT_CROP_ACTUAL     = V4L2_SEL_TGT_CROP
V4L2_SUBDEV_SEL_TGT_COMPOSE_ACTUAL  = V4L2_SEL_TGT_COMPOSE
V4L2_SUBDEV_SEL_TGT_CROP_BOUNDS     = V4L2_SEL_TGT_CROP_BOUNDS
V4L2_SUBDEV_SEL_TGT_COMPOSE_BOUNDS  = V4L2_SEL_TGT_COMPOSE_BOUNDS

V4L2_SEL_FLAG_GE                    = 1 << 0
V4L2_SEL_FLAG_LE                    = 1 << 1
V4L2_SEL_FLAG_KEEP_CONFIG           = 1 << 2

V4L2_SUBDEV_SEL_FLAG_SIZE_GE        = V4L2_SEL_FLAG_GE
V4L2_SUBDEV_SEL_FLAG_SIZE_LE        = V4L2_SEL_FLAG_LE
V4L2_SUBDEV_SEL_FLAG_KEEP_CONFIG    = V4L2_SEL_FLAG_KEEP_CONFIG

class v4l2_edid(ctypes.Structure):
    _fields_ = [
            ('pad', ctypes.c_uint32),
            ('start_block', ctypes.c_uint32),
            ('blocks', ctypes.c_uint32),
            ('reserved', ctypes.c_uint32 * 5),
            ('edid', ctypes.POINTER(ctypes.c_uint8)),
    ]

class timeval(ctypes.Structure):
    _fields_ = [
        ('secs', ctypes.c_long),
        ('usecs', ctypes.c_long),
    ]

class timespec(ctypes.Structure):
    _fields_ = [
        ('tv_sec', ctypes.c_long),
        ('tv_nsec', ctypes.c_long),
    ]

v4l2_std_id = ctypes.c_uint64
enum = ctypes.c_uint
# linux/v4l2-controls.h

# Control classes
V4L2_CTRL_CLASS_USER            = 0x00980000    # Old-style 'user' controls
V4L2_CTRL_CLASS_MPEG            = 0x00990000    # MPEG-compression controls
V4L2_CTRL_CLASS_CAMERA          = 0x009a0000    # Camera class controls
V4L2_CTRL_CLASS_FM_TX           = 0x009b0000    # FM Modulator controls
V4L2_CTRL_CLASS_FLASH           = 0x009c0000    # Camera flash controls
V4L2_CTRL_CLASS_JPEG            = 0x009d0000    # JPEG-compression controls
V4L2_CTRL_CLASS_IMAGE_SOURCE    = 0x009e0000    # Image source controls
V4L2_CTRL_CLASS_IMAGE_PROC      = 0x009f0000    # Image processing controls
V4L2_CTRL_CLASS_DV              = 0x00a00000    # Digital Video controls
V4L2_CTRL_CLASS_FM_RX           = 0x00a10000    # FM Receiver controls
V4L2_CTRL_CLASS_RF_TUNER        = 0x00a20000    # RF tuner controls
V4L2_CTRL_CLASS_DETECT          = 0x00a30000    # Detection controls

# User-class control IDs

V4L2_CID_BASE               = V4L2_CTRL_CLASS_USER | 0x900
V4L2_CID_USER_BASE          = V4L2_CID_BASE
V4L2_CID_USER_CLASS         = V4L2_CTRL_CLASS_USER | 1
V4L2_CID_BRIGHTNESS         = V4L2_CID_BASE + 0
V4L2_CID_CONTRAST           = V4L2_CID_BASE + 1
V4L2_CID_SATURATION         = V4L2_CID_BASE + 2
V4L2_CID_HUE                = V4L2_CID_BASE + 3
V4L2_CID_AUDIO_VOLUME       = V4L2_CID_BASE + 5
V4L2_CID_AUDIO_BALANCE      = V4L2_CID_BASE + 6
V4L2_CID_AUDIO_BASS         = V4L2_CID_BASE + 7
V4L2_CID_AUDIO_TREBLE       = V4L2_CID_BASE + 8
V4L2_CID_AUDIO_MUTE         = V4L2_CID_BASE + 9
V4L2_CID_AUDIO_LOUDNESS     = V4L2_CID_BASE + 10
V4L2_CID_BLACK_LEVEL        = V4L2_CID_BASE + 11 # Deprecated
V4L2_CID_AUTO_WHITE_BALANCE = V4L2_CID_BASE + 12
V4L2_CID_DO_WHITE_BALANCE   = V4L2_CID_BASE + 13
V4L2_CID_RED_BALANCE        = V4L2_CID_BASE + 14
V4L2_CID_BLUE_BALANCE       = V4L2_CID_BASE + 15
V4L2_CID_GAMMA              = V4L2_CID_BASE + 16
V4L2_CID_WHITENESS          = V4L2_CID_GAMMA # Deprecated
V4L2_CID_EXPOSURE           = V4L2_CID_BASE + 17
V4L2_CID_AUTOGAIN           = V4L2_CID_BASE + 18
V4L2_CID_GAIN               = V4L2_CID_BASE + 19
V4L2_CID_HFLIP              = V4L2_CID_BASE + 20
V4L2_CID_VFLIP              = V4L2_CID_BASE + 21

V4L2_CID_POWER_LINE_FREQUENCY = V4L2_CID_BASE + 24

v4l2_power_line_frequency  = enum
(
        V4L2_CID_POWER_LINE_FREQUENCY_DISABLED,
        V4L2_CID_POWER_LINE_FREQUENCY_50HZ,
        V4L2_CID_POWER_LINE_FREQUENCY_60HZ,
        V4L2_CID_POWER_LINE_FREQUENCY_AUTO,
) = range(4)

V4L2_CID_HUE_AUTO                   = V4L2_CID_BASE + 25
V4L2_CID_WHITE_BALANCE_TEMPERATURE  = V4L2_CID_BASE + 26
V4L2_CID_SHARPNESS                  = V4L2_CID_BASE + 27
V4L2_CID_BACKLIGHT_COMPENSATION     = V4L2_CID_BASE + 28
V4L2_CID_CHROMA_AGC                 = V4L2_CID_BASE + 29
V4L2_CID_COLOR_KILLER               = V4L2_CID_BASE + 30
V4L2_CID_COLORFX                    = V4L2_CID_BASE + 31

v4l2_colorfx = enum
(
        V4L2_COLORFX_NONE,
        V4L2_COLORFX_BW,
        V4L2_COLORFX_SEPIA,
        V4L2_COLORFX_NEGATIVE,
        V4L2_COLORFX_EMBOSS,
        V4L2_COLORFX_SKETCH,
        V4L2_COLORFX_SKY_BLUE,
        V4L2_COLORFX_GRASS_GREEN,
        V4L2_COLORFX_SKIN_WHITEN,
        V4L2_COLORFX_VIVID,
        V4L2_COLORFX_AQUA,
        V4L2_COLORFX_ART_FREEZE,
        V4L2_COLORFX_SILHOUETTE,
        V4L2_COLORFX_SOLARIZATION,
        V4L2_COLORFX_ANTIQUE,
        V4L2_COLORFX_SET_CBCR,
) = range(16)

V4L2_CID_AUTOBRIGHTNESS             = V4L2_CID_BASE + 32
V4L2_CID_BAND_STOP_FILTER           = V4L2_CID_BASE + 33
V4L2_CID_ROTATE                     = V4L2_CID_BASE + 34
V4L2_CID_BG_COLOR                   = V4L2_CID_BASE + 35
V4L2_CID_CHROMA_GAIN                = V4L2_CID_BASE + 36
V4L2_CID_ILLUMINATORS_1             = V4L2_CID_BASE + 37
V4L2_CID_ILLUMINATORS_2             = V4L2_CID_BASE + 38

V4L2_CID_MIN_BUFFERS_FOR_CAPTURE    = V4L2_CID_BASE + 39
V4L2_CID_MIN_BUFFERS_FOR_OUTPUT     = V4L2_CID_BASE + 40

V4L2_CID_ALPHA_COMPONENT            = V4L2_CID_BASE + 41
V4L2_CID_COLORFX_CBCR               = V4L2_CID_BASE + 42

# last CID + 1
V4L2_CID_LASTP1                     = V4L2_CID_BASE + 43

# USER-class private control IDs
V4L2_CID_USER_MEYE_BASE             = V4L2_CID_USER_BASE + 0x1000
V4L2_CID_USER_BTTV_BASE             = V4L2_CID_USER_BASE + 0x1010
V4L2_CID_USER_S2255_BASE            = V4L2_CID_USER_BASE + 0x1030
V4L2_CID_USER_SI476X_BASE           = V4L2_CID_USER_BASE + 0x1040
V4L2_CID_USER_TI_VPE_BASE           = V4L2_CID_USER_BASE + 0x1050
V4L2_CID_USER_SAA7134_BASE          = V4L2_CID_USER_BASE + 0x1060
V4L2_CID_USER_ADV7180_BASE          = V4L2_CID_USER_BASE + 0x1070
V4L2_CID_USER_TC358743_BASE         = V4L2_CID_USER_BASE + 0x1080
V4L2_CID_USER_MAX217X_BASE          = V4L2_CID_USER_BASE + 0x1090
V4L2_CID_USER_IMX_BASE              = V4L2_CID_USER_BASE + 0x1090
V4L2_CID_MPEG_BASE                  = V4L2_CTRL_CLASS_MPEG | 0x900
V4L2_CID_MPEG_CLASS                 = V4L2_CTRL_CLASS_MPEG | 1

#  MPEG streams, specific to multiplexed streams
V4L2_CID_MPEG_STREAM_TYPE           = V4L2_CID_MPEG_BASE + 0
v4l2_mpeg_stream_type = enum
(
        V4L2_MPEG_STREAM_TYPE_MPEG2_PS   , # MPEG-2 program stream
        V4L2_MPEG_STREAM_TYPE_MPEG2_TS   , # MPEG-2 transport stream
        V4L2_MPEG_STREAM_TYPE_MPEG1_SS   , # MPEG-1 system stream
        V4L2_MPEG_STREAM_TYPE_MPEG2_DVD  , # MPEG-2 DVD-compatible stream
        V4L2_MPEG_STREAM_TYPE_MPEG1_VCD  , # MPEG-1 VCD-compatible stream
        V4L2_MPEG_STREAM_TYPE_MPEG2_SVCD , # MPEG-2 SVCD-compatible stream
) = range(6)

V4L2_CID_MPEG_STREAM_PID_PMT        = V4L2_CID_MPEG_BASE + 1
V4L2_CID_MPEG_STREAM_PID_AUDIO      = V4L2_CID_MPEG_BASE + 2
V4L2_CID_MPEG_STREAM_PID_VIDEO      = V4L2_CID_MPEG_BASE + 3
V4L2_CID_MPEG_STREAM_PID_PCR        = V4L2_CID_MPEG_BASE + 4
V4L2_CID_MPEG_STREAM_PES_ID_AUDIO   = V4L2_CID_MPEG_BASE + 5
V4L2_CID_MPEG_STREAM_PES_ID_VIDEO   = V4L2_CID_MPEG_BASE + 6
V4L2_CID_MPEG_STREAM_VBI_FMT        = V4L2_CID_MPEG_BASE + 7

v4l2_mpeg_stream_vbi_fmt = enum 
(
        V4L2_MPEG_STREAM_VBI_FMT_NONE,  # No VBI in the MPEG stream
        V4L2_MPEG_STREAM_VBI_FMT_IVTV,  # VBI in private packets, IVTV format
) = range(2)

#  MPEG audio controls specific to multiplexed streams
V4L2_CID_MPEG_AUDIO_SAMPLING_FREQ   = V4L2_CID_MPEG_BASE + 100
v4l2_mpeg_audio_sampling_freq = enum 
(
        V4L2_MPEG_AUDIO_SAMPLING_FREQ_44100,
        V4L2_MPEG_AUDIO_SAMPLING_FREQ_48000,
        V4L2_MPEG_AUDIO_SAMPLING_FREQ_32000,
) = range(3)

V4L2_CID_MPEG_AUDIO_ENCODING        = V4L2_CID_MPEG_BASE + 101
v4l2_mpeg_audio_encoding = enum
(
        V4L2_MPEG_AUDIO_ENCODING_LAYER_1,
        V4L2_MPEG_AUDIO_ENCODING_LAYER_2,
        V4L2_MPEG_AUDIO_ENCODING_LAYER_3,
        V4L2_MPEG_AUDIO_ENCODING_AAC,
        V4L2_MPEG_AUDIO_ENCODING_AC3,
) = range(5)

V4L2_CID_MPEG_AUDIO_L1_BITRATE       = V4L2_CID_MPEG_BASE + 102
v4l2_mpeg_audio_l1_bitrate  = enum
(
        V4L2_MPEG_AUDIO_L1_BITRATE_32K,
        V4L2_MPEG_AUDIO_L1_BITRATE_64K,
        V4L2_MPEG_AUDIO_L1_BITRATE_96K,
        V4L2_MPEG_AUDIO_L1_BITRATE_128K,
        V4L2_MPEG_AUDIO_L1_BITRATE_160K,
        V4L2_MPEG_AUDIO_L1_BITRATE_192K,
        V4L2_MPEG_AUDIO_L1_BITRATE_224K,
        V4L2_MPEG_AUDIO_L1_BITRATE_256K,
        V4L2_MPEG_AUDIO_L1_BITRATE_288K,
        V4L2_MPEG_AUDIO_L1_BITRATE_320K,
        V4L2_MPEG_AUDIO_L1_BITRATE_352K,
        V4L2_MPEG_AUDIO_L1_BITRATE_384K,
        V4L2_MPEG_AUDIO_L1_BITRATE_416K,
        V4L2_MPEG_AUDIO_L1_BITRATE_448K,
) = range(14)

V4L2_CID_MPEG_AUDIO_L2_BITRATE      = V4L2_CID_MPEG_BASE + 103
v4l2_mpeg_audio_l2_bitrate = enum
(
        V4L2_MPEG_AUDIO_L2_BITRATE_32K,
        V4L2_MPEG_AUDIO_L2_BITRATE_48K,
        V4L2_MPEG_AUDIO_L2_BITRATE_56K,
        V4L2_MPEG_AUDIO_L2_BITRATE_64K,
        V4L2_MPEG_AUDIO_L2_BITRATE_80K,
        V4L2_MPEG_AUDIO_L2_BITRATE_96K,
        V4L2_MPEG_AUDIO_L2_BITRATE_112K,
        V4L2_MPEG_AUDIO_L2_BITRATE_128K,
        V4L2_MPEG_AUDIO_L2_BITRATE_160K,
        V4L2_MPEG_AUDIO_L2_BITRATE_192K,
        V4L2_MPEG_AUDIO_L2_BITRATE_224K,
        V4L2_MPEG_AUDIO_L2_BITRATE_256K,
        V4L2_MPEG_AUDIO_L2_BITRATE_320K,
        V4L2_MPEG_AUDIO_L2_BITRATE_384K,
) = range(14)

V4L2_CID_MPEG_AUDIO_L3_BITRATE      = V4L2_CID_MPEG_BASE + 104
v4l2_mpeg_audio_l3_bitrate = enum
(
        V4L2_MPEG_AUDIO_L3_BITRATE_32K,
        V4L2_MPEG_AUDIO_L3_BITRATE_40K,
        V4L2_MPEG_AUDIO_L3_BITRATE_48K,
        V4L2_MPEG_AUDIO_L3_BITRATE_56K,
        V4L2_MPEG_AUDIO_L3_BITRATE_64K,
        V4L2_MPEG_AUDIO_L3_BITRATE_80K,
        V4L2_MPEG_AUDIO_L3_BITRATE_96K,
        V4L2_MPEG_AUDIO_L3_BITRATE_112K,
        V4L2_MPEG_AUDIO_L3_BITRATE_128K,
        V4L2_MPEG_AUDIO_L3_BITRATE_160K,
        V4L2_MPEG_AUDIO_L3_BITRATE_192K,
        V4L2_MPEG_AUDIO_L3_BITRATE_224K,
        V4L2_MPEG_AUDIO_L3_BITRATE_256K,
        V4L2_MPEG_AUDIO_L3_BITRATE_320K,
) = range(14)

V4L2_CID_MPEG_AUDIO_MODE            = V4L2_CID_MPEG_BASE + 105
v4l2_mpeg_audio_mode  = enum
(
        V4L2_MPEG_AUDIO_MODE_STEREO,
        V4L2_MPEG_AUDIO_MODE_JOINT_STEREO,
        V4L2_MPEG_AUDIO_MODE_DUAL,
        V4L2_MPEG_AUDIO_MODE_MONO,
) = range(4)

V4L2_CID_MPEG_AUDIO_MODE_EXTENSION  = V4L2_CID_MPEG_BASE + 106
v4l2_mpeg_audio_mode_extension = enum
(
        V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_4,
        V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_8,
        V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_12,
        V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_16,
) = range(4)

V4L2_CID_MPEG_AUDIO_EMPHASIS        = V4L2_CID_MPEG_BASE + 107
v4l2_mpeg_audio_emphasis = enum
(
        V4L2_MPEG_AUDIO_EMPHASIS_NONE,
        V4L2_MPEG_AUDIO_EMPHASIS_50_DIV_15_uS,
        V4L2_MPEG_AUDIO_EMPHASIS_CCITT_J17,
) = range(3)

V4L2_CID_MPEG_AUDIO_CRC             = V4L2_CID_MPEG_BASE + 108
v4l2_mpeg_audio_crc = enum
(
        V4L2_MPEG_AUDIO_CRC_NONE,
        V4L2_MPEG_AUDIO_CRC_CRC16,
) = range(2)

V4L2_CID_MPEG_AUDIO_MUTE            = V4L2_CID_MPEG_BASE + 109
V4L2_CID_MPEG_AUDIO_AAC_BITRATE     = V4L2_CID_MPEG_BASE + 110
V4L2_CID_MPEG_AUDIO_AC3_BITRATE     = V4L2_CID_MPEG_BASE + 111
v4l2_mpeg_audio_ac3_bitrate = enum
(
        V4L2_MPEG_AUDIO_AC3_BITRATE_32K,
        V4L2_MPEG_AUDIO_AC3_BITRATE_40K,
        V4L2_MPEG_AUDIO_AC3_BITRATE_48K,
        V4L2_MPEG_AUDIO_AC3_BITRATE_56K,
        V4L2_MPEG_AUDIO_AC3_BITRATE_64K,
        V4L2_MPEG_AUDIO_AC3_BITRATE_80K,
        V4L2_MPEG_AUDIO_AC3_BITRATE_96K,
        V4L2_MPEG_AUDIO_AC3_BITRATE_112K,
        V4L2_MPEG_AUDIO_AC3_BITRATE_128K,
        V4L2_MPEG_AUDIO_AC3_BITRATE_160K,
        V4L2_MPEG_AUDIO_AC3_BITRATE_192K,
        V4L2_MPEG_AUDIO_AC3_BITRATE_224K,
        V4L2_MPEG_AUDIO_AC3_BITRATE_256K,
        V4L2_MPEG_AUDIO_AC3_BITRATE_320K,
        V4L2_MPEG_AUDIO_AC3_BITRATE_384K,
        V4L2_MPEG_AUDIO_AC3_BITRATE_448K,
        V4L2_MPEG_AUDIO_AC3_BITRATE_512K,
        V4L2_MPEG_AUDIO_AC3_BITRATE_576K,
        V4L2_MPEG_AUDIO_AC3_BITRATE_640K,
) = range(19)

V4L2_CID_MPEG_AUDIO_DEC_PLAYBACK    = V4L2_CID_MPEG_BASE + 112
v4l2_mpeg_audio_dec_playback = enum
(
        V4L2_MPEG_AUDIO_DEC_PLAYBACK_AUTO,
        V4L2_MPEG_AUDIO_DEC_PLAYBACK_STEREO,
        V4L2_MPEG_AUDIO_DEC_PLAYBACK_LEFT,
        V4L2_MPEG_AUDIO_DEC_PLAYBACK_RIGHT,
        V4L2_MPEG_AUDIO_DEC_PLAYBACK_MONO,
        V4L2_MPEG_AUDIO_DEC_PLAYBACK_SWAPPED_STEREO,
) = range(6)

V4L2_CID_MPEG_AUDIO_DEC_MULTILINGUAL_PLAYBACK = V4L2_CID_MPEG_BASE + 113

#  MPEG video controls specific to multiplexed streams
V4L2_CID_MPEG_VIDEO_ENCODING        = V4L2_CID_MPEG_BASE + 200
v4l2_mpeg_video_encoding = enum
(
        V4L2_MPEG_VIDEO_ENCODING_MPEG_1,
        V4L2_MPEG_VIDEO_ENCODING_MPEG_2,
        V4L2_MPEG_VIDEO_ENCODING_MPEG_4_AVC,
) = range(3)

V4L2_CID_MPEG_VIDEO_ASPECT          = V4L2_CID_MPEG_BASE + 201
v4l2_mpeg_video_aspect = enum
(
        V4L2_MPEG_VIDEO_ASPECT_1x1,
        V4L2_MPEG_VIDEO_ASPECT_4x3,
        V4L2_MPEG_VIDEO_ASPECT_16x9,
        V4L2_MPEG_VIDEO_ASPECT_221x100,
) = range(4)

V4L2_CID_MPEG_VIDEO_B_FRAMES        = V4L2_CID_MPEG_BASE + 202
V4L2_CID_MPEG_VIDEO_GOP_SIZE        = V4L2_CID_MPEG_BASE + 203
V4L2_CID_MPEG_VIDEO_GOP_CLOSURE     = V4L2_CID_MPEG_BASE + 204
V4L2_CID_MPEG_VIDEO_PULLDOWN        = V4L2_CID_MPEG_BASE + 205
V4L2_CID_MPEG_VIDEO_BITRATE_MODE    = V4L2_CID_MPEG_BASE + 206
v4l2_mpeg_video_bitrate_mode = enum
(
        V4L2_MPEG_VIDEO_BITRATE_MODE_VBR,
        V4L2_MPEG_VIDEO_BITRATE_MODE_CBR,
) = range(2)

V4L2_CID_MPEG_VIDEO_BITRATE                         = V4L2_CID_MPEG_BASE + 207
V4L2_CID_MPEG_VIDEO_BITRATE_PEAK                    = V4L2_CID_MPEG_BASE + 208
V4L2_CID_MPEG_VIDEO_TEMPORAL_DECIMATION             = V4L2_CID_MPEG_BASE + 209
V4L2_CID_MPEG_VIDEO_MUTE                            = V4L2_CID_MPEG_BASE + 210
V4L2_CID_MPEG_VIDEO_MUTE_YUV                        = V4L2_CID_MPEG_BASE + 211
V4L2_CID_MPEG_VIDEO_DECODER_SLICE_INTERFACE         = V4L2_CID_MPEG_BASE + 212
V4L2_CID_MPEG_VIDEO_DECODER_MPEG4_DEBLOCK_FILTER    = V4L2_CID_MPEG_BASE + 213
V4L2_CID_MPEG_VIDEO_CYCLIC_INTRA_REFRESH_MB         = V4L2_CID_MPEG_BASE + 214
V4L2_CID_MPEG_VIDEO_FRAME_RC_ENABLE                 = V4L2_CID_MPEG_BASE + 215
V4L2_CID_MPEG_VIDEO_HEADER_MODE                     = V4L2_CID_MPEG_BASE + 216
v4l2_mpeg_video_header_mode = enum
(
        V4L2_MPEG_VIDEO_HEADER_MODE_SEPARATE,
        V4L2_MPEG_VIDEO_HEADER_MODE_JOINED_WITH_1ST_FRAME,
) = range(2)

V4L2_CID_MPEG_VIDEO_MAX_REF_PIC             = V4L2_CID_MPEG_BASE + 217
V4L2_CID_MPEG_VIDEO_MB_RC_ENABLE            = V4L2_CID_MPEG_BASE + 218
V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MAX_BYTES   = V4L2_CID_MPEG_BASE + 219
V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MAX_MB      = V4L2_CID_MPEG_BASE + 220
V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MODE        = V4L2_CID_MPEG_BASE + 221
v4l2_mpeg_video_multi_slice_mode = enum
(
        V4L2_MPEG_VIDEO_MULTI_SLICE_MODE_SINGLE,
        V4L2_MPEG_VIDEO_MULTI_SICE_MODE_MAX_MB,
        V4L2_MPEG_VIDEO_MULTI_SICE_MODE_MAX_BYTES,
) = range(3)

V4L2_CID_MPEG_VIDEO_VBV_SIZE            = V4L2_CID_MPEG_BASE + 222
V4L2_CID_MPEG_VIDEO_DEC_PTS             = V4L2_CID_MPEG_BASE + 223
V4L2_CID_MPEG_VIDEO_DEC_FRAME           = V4L2_CID_MPEG_BASE + 224
V4L2_CID_MPEG_VIDEO_VBV_DELAY           = V4L2_CID_MPEG_BASE + 225
V4L2_CID_MPEG_VIDEO_REPEAT_SEQ_HEADER   = V4L2_CID_MPEG_BASE + 226
V4L2_CID_MPEG_VIDEO_MV_H_SEARCH_RANGE   = V4L2_CID_MPEG_BASE + 227
V4L2_CID_MPEG_VIDEO_MV_V_SEARCH_RANGE   = V4L2_CID_MPEG_BASE + 228
V4L2_CID_MPEG_VIDEO_FORCE_KEY_FRAME     = V4L2_CID_MPEG_BASE + 229
V4L2_CID_MPEG_VIDEO_H263_I_FRAME_QP     = V4L2_CID_MPEG_BASE + 300
V4L2_CID_MPEG_VIDEO_H263_P_FRAME_QP     = V4L2_CID_MPEG_BASE + 301
V4L2_CID_MPEG_VIDEO_H263_B_FRAME_QP     = V4L2_CID_MPEG_BASE + 302
V4L2_CID_MPEG_VIDEO_H263_MIN_QP         = V4L2_CID_MPEG_BASE + 303
V4L2_CID_MPEG_VIDEO_H263_MAX_QP         = V4L2_CID_MPEG_BASE + 304
V4L2_CID_MPEG_VIDEO_H264_I_FRAME_QP     = V4L2_CID_MPEG_BASE + 350
V4L2_CID_MPEG_VIDEO_H264_P_FRAME_QP     = V4L2_CID_MPEG_BASE + 351
V4L2_CID_MPEG_VIDEO_H264_B_FRAME_QP     = V4L2_CID_MPEG_BASE + 352
V4L2_CID_MPEG_VIDEO_H264_MIN_QP         = V4L2_CID_MPEG_BASE + 353
V4L2_CID_MPEG_VIDEO_H264_MAX_QP         = V4L2_CID_MPEG_BASE + 354
V4L2_CID_MPEG_VIDEO_H264_8X8_TRANSFORM  = V4L2_CID_MPEG_BASE + 355
V4L2_CID_MPEG_VIDEO_H264_CPB_SIZE       = V4L2_CID_MPEG_BASE + 356
V4L2_CID_MPEG_VIDEO_H264_ENTROPY_MODE   = V4L2_CID_MPEG_BASE + 357
v4l2_mpeg_video_h264_entropy_mode = enum
(
        V4L2_MPEG_VIDEO_H264_ENTROPY_MODE_CAVLC,
        V4L2_MPEG_VIDEO_H264_ENTROPY_MODE_CABAC,
) = range(2)

V4L2_CID_MPEG_VIDEO_H264_I_PERIOD       = V4L2_CID_MPEG_BASE + 358
V4L2_CID_MPEG_VIDEO_H264_LEVEL          = V4L2_CID_MPEG_BASE + 359
v4l2_mpeg_video_h264_level = enum
(
        V4L2_MPEG_VIDEO_H264_LEVEL_1_0,
        V4L2_MPEG_VIDEO_H264_LEVEL_1B,
        V4L2_MPEG_VIDEO_H264_LEVEL_1_1,
        V4L2_MPEG_VIDEO_H264_LEVEL_1_2,
        V4L2_MPEG_VIDEO_H264_LEVEL_1_3,
        V4L2_MPEG_VIDEO_H264_LEVEL_2_0,
        V4L2_MPEG_VIDEO_H264_LEVEL_2_1,
        V4L2_MPEG_VIDEO_H264_LEVEL_2_2,
        V4L2_MPEG_VIDEO_H264_LEVEL_3_0,
        V4L2_MPEG_VIDEO_H264_LEVEL_3_1,
        V4L2_MPEG_VIDEO_H264_LEVEL_3_2,
        V4L2_MPEG_VIDEO_H264_LEVEL_4_0,
        V4L2_MPEG_VIDEO_H264_LEVEL_4_1,
        V4L2_MPEG_VIDEO_H264_LEVEL_4_2,
        V4L2_MPEG_VIDEO_H264_LEVEL_5_0,
        V4L2_MPEG_VIDEO_H264_LEVEL_5_1,
) = range(16)

V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_ALPHA  = V4L2_CID_MPEG_BASE + 360
V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_BETA   = V4L2_CID_MPEG_BASE + 361
V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_MODE   = V4L2_CID_MPEG_BASE + 362
v4l2_mpeg_video_h264_loop_filter_mode = enum
(
        V4L2_MPEG_VIDEO_H264_LOOP_FILTER_MODE_ENABLED,
        V4L2_MPEG_VIDEO_H264_LOOP_FILTER_MODE_DISABLED,
        V4L2_MPEG_VIDEO_H264_LOOP_FILTER_MODE_DISABLED_AT_SLICE_BOUNDARY,
) = range(3)

V4L2_CID_MPEG_VIDEO_H264_PROFILE            = V4L2_CID_MPEG_BASE + 363
v4l2_mpeg_video_h264_profile = enum
(
        V4L2_MPEG_VIDEO_H264_PROFILE_BASELINE,
        V4L2_MPEG_VIDEO_H264_PROFILE_CONSTRAINED_BASELINE,
        V4L2_MPEG_VIDEO_H264_PROFILE_MAIN,
        V4L2_MPEG_VIDEO_H264_PROFILE_EXTENDED,
        V4L2_MPEG_VIDEO_H264_PROFILE_HIGH,
        V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_10,
        V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_422,
        V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_444_PREDICTIVE,
        V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_10_INTRA,
        V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_422_INTRA,
        V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_444_INTRA,
        V4L2_MPEG_VIDEO_H264_PROFILE_CAVLC_444_INTRA,
        V4L2_MPEG_VIDEO_H264_PROFILE_SCALABLE_BASELINE,
        V4L2_MPEG_VIDEO_H264_PROFILE_SCALABLE_HIGH,
        V4L2_MPEG_VIDEO_H264_PROFILE_SCALABLE_HIGH_INTRA,
        V4L2_MPEG_VIDEO_H264_PROFILE_STEREO_HIGH,
        V4L2_MPEG_VIDEO_H264_PROFILE_MULTIVIEW_HIGH,
) = range(17)

V4L2_CID_MPEG_VIDEO_H264_VUI_EXT_SAR_HEIGHT = V4L2_CID_MPEG_BASE + 364
V4L2_CID_MPEG_VIDEO_H264_VUI_EXT_SAR_WIDTH  = V4L2_CID_MPEG_BASE + 365
V4L2_CID_MPEG_VIDEO_H264_VUI_SAR_ENABLE     = V4L2_CID_MPEG_BASE + 366
V4L2_CID_MPEG_VIDEO_H264_VUI_SAR_IDC        = V4L2_CID_MPEG_BASE + 367
v4l2_mpeg_video_h264_vui_sar_idc = enum
(
        V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_UNSPECIFIED,
        V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_1x1,
        V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_12x11,
        V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_10x11,
        V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_16x11,
        V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_40x33,
        V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_24x11,
        V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_20x11,
        V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_32x11,
        V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_80x33,
        V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_18x11,
        V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_15x11,
        V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_64x33,
        V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_160x99,
        V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_4x3,
        V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_3x2,
        V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_2x1,
        V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_EXTENDED,
) = range(18)

V4L2_CID_MPEG_VIDEO_H264_SEI_FRAME_PACKING          = V4L2_CID_MPEG_BASE + 368
V4L2_CID_MPEG_VIDEO_H264_SEI_FP_CURRENT_FRAME_0     = V4L2_CID_MPEG_BASE + 369
V4L2_CID_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE    = V4L2_CID_MPEG_BASE + 370
v4l2_mpeg_video_h264_sei_fp_arrangement_type = enum
(
        V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_CHECKERBOARD,
        V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_COLUMN,
        V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_ROW,
        V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_SIDE_BY_SIDE,
        V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_TOP_BOTTOM,
        V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_TEMPORAL,
) = range(6)

V4L2_CID_MPEG_VIDEO_H264_FMO            = V4L2_CID_MPEG_BASE + 371
V4L2_CID_MPEG_VIDEO_H264_FMO_MAP_TYPE   = V4L2_CID_MPEG_BASE + 372
v4l2_mpeg_video_h264_fmo_map_type = enum
(
        V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_INTERLEAVED_SLICES,
        V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_SCATTERED_SLICES,
        V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_FOREGROUND_WITH_LEFT_OVER,
        V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_BOX_OUT,
        V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_RASTER_SCAN,
        V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_WIPE_SCAN,
        V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_EXPLICIT,
) = range(7)

V4L2_CID_MPEG_VIDEO_H264_FMO_SLICE_GROUP        = V4L2_CID_MPEG_BASE + 373
V4L2_CID_MPEG_VIDEO_H264_FMO_CHANGE_DIRECTION   = V4L2_CID_MPEG_BASE + 374
v4l2_mpeg_video_h264_fmo_change_dir = enum
(
        V4L2_MPEG_VIDEO_H264_FMO_CHANGE_DIR_RIGHT,
        V4L2_MPEG_VIDEO_H264_FMO_CHANGE_DIR_LEFT,
) = range(2)

V4L2_CID_MPEG_VIDEO_H264_FMO_CHANGE_RATE            = V4L2_CID_MPEG_BASE + 375
V4L2_CID_MPEG_VIDEO_H264_FMO_RUN_LENGTH             = V4L2_CID_MPEG_BASE + 376
V4L2_CID_MPEG_VIDEO_H264_ASO                        = V4L2_CID_MPEG_BASE + 377
V4L2_CID_MPEG_VIDEO_H264_ASO_SLICE_ORDER            = V4L2_CID_MPEG_BASE + 378
V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING        = V4L2_CID_MPEG_BASE + 379
V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_TYPE   = V4L2_CID_MPEG_BASE + 380
v4l2_mpeg_video_h264_hierarchical_coding_type = enum
(
        V4L2_MPEG_VIDEO_H264_HIERARCHICAL_CODING_B,
        V4L2_MPEG_VIDEO_H264_HIERARCHICAL_CODING_P,
) = range(2)

V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_LAYER      = V4L2_CID_MPEG_BASE + 381
V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_LAYER_QP   = V4L2_CID_MPEG_BASE + 382
V4L2_CID_MPEG_VIDEO_MPEG4_I_FRAME_QP                    = V4L2_CID_MPEG_BASE + 400
V4L2_CID_MPEG_VIDEO_MPEG4_P_FRAME_QP                    = V4L2_CID_MPEG_BASE + 401
V4L2_CID_MPEG_VIDEO_MPEG4_B_FRAME_QP                    = V4L2_CID_MPEG_BASE + 402
V4L2_CID_MPEG_VIDEO_MPEG4_MIN_QP                        = V4L2_CID_MPEG_BASE + 403
V4L2_CID_MPEG_VIDEO_MPEG4_MAX_QP                        = V4L2_CID_MPEG_BASE + 404
V4L2_CID_MPEG_VIDEO_MPEG4_LEVEL                         = V4L2_CID_MPEG_BASE + 405
v4l2_mpeg_video_mpeg4_level = enum
(
        V4L2_MPEG_VIDEO_MPEG4_LEVEL_0,
        V4L2_MPEG_VIDEO_MPEG4_LEVEL_0B,
        V4L2_MPEG_VIDEO_MPEG4_LEVEL_1,
        V4L2_MPEG_VIDEO_MPEG4_LEVEL_2,
        V4L2_MPEG_VIDEO_MPEG4_LEVEL_3,
        V4L2_MPEG_VIDEO_MPEG4_LEVEL_3B,
        V4L2_MPEG_VIDEO_MPEG4_LEVEL_4,
        V4L2_MPEG_VIDEO_MPEG4_LEVEL_5,
) = range(8)

V4L2_CID_MPEG_VIDEO_MPEG4_PROFILE   = V4L2_CID_MPEG_BASE + 406
v4l2_mpeg_video_mpeg4_profile = enum
(
        V4L2_MPEG_VIDEO_MPEG4_PROFILE_SIMPLE,
        V4L2_MPEG_VIDEO_MPEG4_PROFILE_ADVANCED_SIMPLE,
        V4L2_MPEG_VIDEO_MPEG4_PROFILE_CORE,
        V4L2_MPEG_VIDEO_MPEG4_PROFILE_SIMPLE_SCALABLE,
        V4L2_MPEG_VIDEO_MPEG4_PROFILE_ADVANCED_CODING_EFFICIENCY,
) = range(5)

V4L2_CID_MPEG_VIDEO_MPEG4_QPEL          = V4L2_CID_MPEG_BASE + 407
V4L2_CID_MPEG_VIDEO_VPX_NUM_PARTITIONS  = V4L2_CID_MPEG_BASE + 500
v4l2_vp8_num_partitions = enum
(
        V4L2_CID_MPEG_VIDEO_VPX_1_PARTITION,
        V4L2_CID_MPEG_VIDEO_VPX_2_PARTITIONS,
        V4L2_CID_MPEG_VIDEO_VPX_4_PARTITIONS,
        V4L2_CID_MPEG_VIDEO_VPX_8_PARTITIONS,
) = range(4)

V4L2_CID_MPEG_VIDEO_VPX_IMD_DISABLE_4X4 = V4L2_CID_MPEG_BASE + 501
V4L2_CID_MPEG_VIDEO_VPX_NUM_REF_FRAMES  = V4L2_CID_MPEG_BASE + 502
v4l2_vp8_num_ref_frames = enum
(
        V4L2_CID_MPEG_VIDEO_VPX_1_REF_FRAME,
        V4L2_CID_MPEG_VIDEO_VPX_2_REF_FRAME,
        V4L2_CID_MPEG_VIDEO_VPX_3_REF_FRAME,
) = range(3)

V4L2_CID_MPEG_VIDEO_VPX_FILTER_LEVEL            = V4L2_CID_MPEG_BASE + 503
V4L2_CID_MPEG_VIDEO_VPX_FILTER_SHARPNESS        = V4L2_CID_MPEG_BASE + 504
V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_REF_PERIOD = V4L2_CID_MPEG_BASE + 505
V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_SEL        = V4L2_CID_MPEG_BASE + 506
v4l2_vp8_golden_frame_sel = enum
(
        V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_USE_PREV,
        V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_USE_REF_PERIOD,
) = range(2)

V4L2_CID_MPEG_VIDEO_VPX_MIN_QP      = V4L2_CID_MPEG_BASE + 507
V4L2_CID_MPEG_VIDEO_VPX_MAX_QP      = V4L2_CID_MPEG_BASE + 508
V4L2_CID_MPEG_VIDEO_VPX_I_FRAME_QP  = V4L2_CID_MPEG_BASE + 509
V4L2_CID_MPEG_VIDEO_VPX_P_FRAME_QP  = V4L2_CID_MPEG_BASE + 510
V4L2_CID_MPEG_VIDEO_VPX_PROFILE     = V4L2_CID_MPEG_BASE + 511

#  MPEG-class control IDs specific to the CX2341x driver as defined by V4L2
V4L2_CID_MPEG_CX2341X_BASE                      = V4L2_CTRL_CLASS_MPEG | 0x1000
V4L2_CID_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE = V4L2_CID_MPEG_CX2341X_BASE + 0
v4l2_mpeg_cx2341x_video_spatial_filter_mode = enum
(
        V4L2_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE_MANUAL,
        V4L2_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE_AUTO,
) = range(2)

V4L2_CID_MPEG_CX2341X_VIDEO_SPATIAL_FILTER              = V4L2_CID_MPEG_CX2341X_BASE + 1
V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE    = V4L2_CID_MPEG_CX2341X_BASE + 2
v4l2_mpeg_cx2341x_video_luma_spatial_filter_type = enum
(
        V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_OFF,
        V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_1D_HOR,
        V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_1D_VERT,
        V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_2D_HV_SEPARABLE,
        V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_2D_SYM_NON_SEPARABLE,
) = range(5)

V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE  = V4L2_CID_MPEG_CX2341X_BASE + 3
v4l2_mpeg_cx2341x_video_chroma_spatial_filter_type = enum
(
        V4L2_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE_OFF,
        V4L2_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE_1D_HOR,
) = range(2)

V4L2_CID_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE     = V4L2_CID_MPEG_CX2341X_BASE + 4
v4l2_mpeg_cx2341x_video_temporal_filter_mode  = enum
(
        V4L2_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE_MANUAL,
        V4L2_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE_AUTO,
) = range(2)
V4L2_CID_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER     = V4L2_CID_MPEG_CX2341X_BASE + 5
V4L2_CID_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE  = V4L2_CID_MPEG_CX2341X_BASE + 6
v4l2_mpeg_cx2341x_video_median_filter_type = enum
(
        V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_OFF,
        V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_HOR,
        V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_VERT,
        V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_HOR_VERT,
        V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_DIAG,
) = range(5)

V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_MEDIAN_FILTER_BOTTOM   = V4L2_CID_MPEG_CX2341X_BASE + 7
V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_MEDIAN_FILTER_TOP      = V4L2_CID_MPEG_CX2341X_BASE + 8
V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_MEDIAN_FILTER_BOTTOM = V4L2_CID_MPEG_CX2341X_BASE + 9
V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_MEDIAN_FILTER_TOP    = V4L2_CID_MPEG_CX2341X_BASE + 10
V4L2_CID_MPEG_CX2341X_STREAM_INSERT_NAV_PACKETS         = V4L2_CID_MPEG_CX2341X_BASE + 11

#  MPEG-class control IDs specific to the Samsung MFC 5.1 driver as defined by V4L2
V4L2_CID_MPEG_MFC51_BASE                = V4L2_CTRL_CLASS_MPEG | 0x1100

V4L2_CID_MPEG_MFC51_VIDEO_DECODER_H264_DISPLAY_DELAY        = V4L2_CID_MPEG_MFC51_BASE + 0
V4L2_CID_MPEG_MFC51_VIDEO_DECODER_H264_DISPLAY_DELAY_ENABLE = V4L2_CID_MPEG_MFC51_BASE + 1
V4L2_CID_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE                   = V4L2_CID_MPEG_MFC51_BASE + 2
v4l2_mpeg_mfc51_video_frame_skip_mode = enum
(
        V4L2_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE_DISABLED,
        V4L2_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE_LEVEL_LIMIT,
        V4L2_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE_BUF_LIMIT,
) = range(3)
V4L2_CID_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE  = V4L2_CID_MPEG_MFC51_BASE + 3
v4l2_mpeg_mfc51_video_force_frame_type = enum
(
        V4L2_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE_DISABLED,
        V4L2_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE_I_FRAME,
        V4L2_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE_NOT_CODED,
) = range(3)

V4L2_CID_MPEG_MFC51_VIDEO_PADDING                   = V4L2_CID_MPEG_MFC51_BASE + 4
V4L2_CID_MPEG_MFC51_VIDEO_PADDING_YUV               = V4L2_CID_MPEG_MFC51_BASE + 5
V4L2_CID_MPEG_MFC51_VIDEO_RC_FIXED_TARGET_BIT       = V4L2_CID_MPEG_MFC51_BASE + 6
V4L2_CID_MPEG_MFC51_VIDEO_RC_REACTION_COEFF         = V4L2_CID_MPEG_MFC51_BASE + 7
V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_ACTIVITY = V4L2_CID_MPEG_MFC51_BASE + 50
V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_DARK     = V4L2_CID_MPEG_MFC51_BASE + 51
V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_SMOOTH   = V4L2_CID_MPEG_MFC51_BASE + 52
V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_STATIC   = V4L2_CID_MPEG_MFC51_BASE + 53
V4L2_CID_MPEG_MFC51_VIDEO_H264_NUM_REF_PIC_FOR_P    = V4L2_CID_MPEG_MFC51_BASE + 54


#  Camera class control IDs

V4L2_CID_CAMERA_CLASS_BASE  = V4L2_CTRL_CLASS_CAMERA | 0x900
V4L2_CID_CAMERA_CLASS       = V4L2_CTRL_CLASS_CAMERA | 1
V4L2_CID_EXPOSURE_AUTO      = V4L2_CID_CAMERA_CLASS_BASE + 1
v4l2_exposure_auto_type = enum
(
        V4L2_EXPOSURE_AUTO,
        V4L2_EXPOSURE_MANUAL,
        V4L2_EXPOSURE_SHUTTER_PRIORITY,
        V4L2_EXPOSURE_APERTURE_PRIORITY,
) = range(4)

V4L2_CID_EXPOSURE_ABSOLUTE              = V4L2_CID_CAMERA_CLASS_BASE + 2
V4L2_CID_EXPOSURE_AUTO_PRIORITY         = V4L2_CID_CAMERA_CLASS_BASE + 3
V4L2_CID_PAN_RELATIVE                   = V4L2_CID_CAMERA_CLASS_BASE + 4
V4L2_CID_TILT_RELATIVE                  = V4L2_CID_CAMERA_CLASS_BASE + 5
V4L2_CID_PAN_RESET                      = V4L2_CID_CAMERA_CLASS_BASE + 6
V4L2_CID_TILT_RESET                     = V4L2_CID_CAMERA_CLASS_BASE + 7
V4L2_CID_PAN_ABSOLUTE                   = V4L2_CID_CAMERA_CLASS_BASE + 8
V4L2_CID_TILT_ABSOLUTE                  = V4L2_CID_CAMERA_CLASS_BASE + 9
V4L2_CID_FOCUS_ABSOLUTE                 = V4L2_CID_CAMERA_CLASS_BASE + 10
V4L2_CID_FOCUS_RELATIVE                 = V4L2_CID_CAMERA_CLASS_BASE + 11
V4L2_CID_FOCUS_AUTO                     = V4L2_CID_CAMERA_CLASS_BASE + 12
V4L2_CID_ZOOM_ABSOLUTE                  = V4L2_CID_CAMERA_CLASS_BASE + 13
V4L2_CID_ZOOM_RELATIVE                  = V4L2_CID_CAMERA_CLASS_BASE + 14
V4L2_CID_ZOOM_CONTINUOUS                = V4L2_CID_CAMERA_CLASS_BASE + 15
V4L2_CID_PRIVACY                        = V4L2_CID_CAMERA_CLASS_BASE + 16
V4L2_CID_IRIS_ABSOLUTE                  = V4L2_CID_CAMERA_CLASS_BASE + 17
V4L2_CID_IRIS_RELATIVE                  = V4L2_CID_CAMERA_CLASS_BASE + 18
V4L2_CID_AUTO_EXPOSURE_BIAS             = V4L2_CID_CAMERA_CLASS_BASE + 19
V4L2_CID_AUTO_N_PRESET_WHITE_BALANCE    = V4L2_CID_CAMERA_CLASS_BASE + 20
v4l2_auto_n_preset_white_balance = enum
(
        V4L2_WHITE_BALANCE_MANUAL,
        V4L2_WHITE_BALANCE_AUTO,
        V4L2_WHITE_BALANCE_INCANDESCENT,
        V4L2_WHITE_BALANCE_FLUORESCENT,
        V4L2_WHITE_BALANCE_FLUORESCENT_H,
        V4L2_WHITE_BALANCE_HORIZON,
        V4L2_WHITE_BALANCE_DAYLIGHT,
        V4L2_WHITE_BALANCE_FLASH,
        V4L2_WHITE_BALANCE_CLOUDY,
        V4L2_WHITE_BALANCE_SHADE,
) = range(10)

V4L2_CID_WIDE_DYNAMIC_RANGE     = V4L2_CID_CAMERA_CLASS_BASE + 21
V4L2_CID_IMAGE_STABILIZATION    = V4L2_CID_CAMERA_CLASS_BASE + 22
V4L2_CID_ISO_SENSITIVITY        = V4L2_CID_CAMERA_CLASS_BASE + 23
V4L2_CID_ISO_SENSITIVITY_AUTO   = V4L2_CID_CAMERA_CLASS_BASE + 24
v4l2_iso_sensitivity_auto_type = enum
(
        V4L2_ISO_SENSITIVITY_MANUAL,
        V4L2_ISO_SENSITIVITY_AUTO,
) = range(2)

V4L2_CID_EXPOSURE_METERING      = V4L2_CID_CAMERA_CLASS_BASE + 25
v4l2_exposure_metering = enum
(
        V4L2_EXPOSURE_METERING_AVERAGE,
        V4L2_EXPOSURE_METERING_CENTER_WEIGHTED,
        V4L2_EXPOSURE_METERING_SPOT,
        V4L2_EXPOSURE_METERING_MATRIX,
) = range(4)

V4L2_CID_SCENE_MODE            = V4L2_CID_CAMERA_CLASS_BASE + 26
v4l2_scene_mode  = enum
(
        V4L2_SCENE_MODE_NONE,
        V4L2_SCENE_MODE_BACKLIGHT,
        V4L2_SCENE_MODE_BEACH_SNOW,
        V4L2_SCENE_MODE_CANDLE_LIGHT,
        V4L2_SCENE_MODE_DAWN_DUSK,
        V4L2_SCENE_MODE_FALL_COLORS,
        V4L2_SCENE_MODE_FIREWORKS,
        V4L2_SCENE_MODE_LANDSCAPE,
        V4L2_SCENE_MODE_NIGHT,
        V4L2_SCENE_MODE_PARTY_INDOOR,
        V4L2_SCENE_MODE_PORTRAIT,
        V4L2_SCENE_MODE_SPORTS,
        V4L2_SCENE_MODE_SUNSET,
        V4L2_SCENE_MODE_TEXT,
) = range(14)

V4L2_CID_3A_LOCK            = V4L2_CID_CAMERA_CLASS_BASE + 27
V4L2_LOCK_EXPOSURE            = 1 << 0
V4L2_LOCK_WHITE_BALANCE        = 1 << 1
V4L2_LOCK_FOCUS                = 1 << 2

V4L2_CID_AUTO_FOCUS_START       = V4L2_CID_CAMERA_CLASS_BASE + 28
V4L2_CID_AUTO_FOCUS_STOP        = V4L2_CID_CAMERA_CLASS_BASE + 29
V4L2_CID_AUTO_FOCUS_STATUS      = V4L2_CID_CAMERA_CLASS_BASE + 30
V4L2_AUTO_FOCUS_STATUS_IDLE     = 0 << 0
V4L2_AUTO_FOCUS_STATUS_BUSY     = 1 << 0
V4L2_AUTO_FOCUS_STATUS_REACHED  = 1 << 1
V4L2_AUTO_FOCUS_STATUS_FAILED   = 1 << 2

V4L2_CID_AUTO_FOCUS_RANGE       = V4L2_CID_CAMERA_CLASS_BASE + 31
v4l2_auto_focus_range = enum
(
        V4L2_AUTO_FOCUS_RANGE_AUTO,
        V4L2_AUTO_FOCUS_RANGE_NORMAL,
        V4L2_AUTO_FOCUS_RANGE_MACRO,
        V4L2_AUTO_FOCUS_RANGE_INFINITY,
) = range(4)

V4L2_CID_PAN_SPEED  = V4L2_CID_CAMERA_CLASS_BASE + 32
V4L2_CID_TILT_SPEED = V4L2_CID_CAMERA_CLASS_BASE + 33

# FM Modulator class control IDs
V4L2_CID_FM_TX_CLASS_BASE               = V4L2_CTRL_CLASS_FM_TX | 0x900
V4L2_CID_FM_TX_CLASS                    = V4L2_CTRL_CLASS_FM_TX | 1
V4L2_CID_RDS_TX_DEVIATION               = V4L2_CID_FM_TX_CLASS_BASE + 1
V4L2_CID_RDS_TX_PI                      = V4L2_CID_FM_TX_CLASS_BASE + 2
V4L2_CID_RDS_TX_PTY                     = V4L2_CID_FM_TX_CLASS_BASE + 3
V4L2_CID_RDS_TX_PS_NAME                 = V4L2_CID_FM_TX_CLASS_BASE + 5
V4L2_CID_RDS_TX_RADIO_TEXT              = V4L2_CID_FM_TX_CLASS_BASE + 6
V4L2_CID_RDS_TX_MONO_STEREO             = V4L2_CID_FM_TX_CLASS_BASE + 7
V4L2_CID_RDS_TX_ARTIFICIAL_HEAD         = V4L2_CID_FM_TX_CLASS_BASE + 8
V4L2_CID_RDS_TX_COMPRESSED              = V4L2_CID_FM_TX_CLASS_BASE + 9
V4L2_CID_RDS_TX_DYNAMIC_PTY             = V4L2_CID_FM_TX_CLASS_BASE + 10
V4L2_CID_RDS_TX_TRAFFIC_ANNOUNCEMENT    = V4L2_CID_FM_TX_CLASS_BASE + 11
V4L2_CID_RDS_TX_TRAFFIC_PROGRAM         = V4L2_CID_FM_TX_CLASS_BASE + 12
V4L2_CID_RDS_TX_MUSIC_SPEECH            = V4L2_CID_FM_TX_CLASS_BASE + 13
V4L2_CID_RDS_TX_ALT_FREQS_ENABLE        = V4L2_CID_FM_TX_CLASS_BASE + 14
V4L2_CID_RDS_TX_ALT_FREQS               = V4L2_CID_FM_TX_CLASS_BASE + 15
V4L2_CID_AUDIO_LIMITER_ENABLED          = V4L2_CID_FM_TX_CLASS_BASE + 64
V4L2_CID_AUDIO_LIMITER_RELEASE_TIME     = V4L2_CID_FM_TX_CLASS_BASE + 65
V4L2_CID_AUDIO_LIMITER_DEVIATION        = V4L2_CID_FM_TX_CLASS_BASE + 66
V4L2_CID_AUDIO_COMPRESSION_ENABLED      = V4L2_CID_FM_TX_CLASS_BASE + 80
V4L2_CID_AUDIO_COMPRESSION_GAIN         = V4L2_CID_FM_TX_CLASS_BASE + 81
V4L2_CID_AUDIO_COMPRESSION_THRESHOLD    = V4L2_CID_FM_TX_CLASS_BASE + 82
V4L2_CID_AUDIO_COMPRESSION_ATTACK_TIME  = V4L2_CID_FM_TX_CLASS_BASE + 83
V4L2_CID_AUDIO_COMPRESSION_RELEASE_TIME = V4L2_CID_FM_TX_CLASS_BASE + 84
V4L2_CID_PILOT_TONE_ENABLED             = V4L2_CID_FM_TX_CLASS_BASE + 96
V4L2_CID_PILOT_TONE_DEVIATION           = V4L2_CID_FM_TX_CLASS_BASE + 97
V4L2_CID_PILOT_TONE_FREQUENCY           = V4L2_CID_FM_TX_CLASS_BASE + 98
V4L2_CID_TUNE_PREEMPHASIS               = V4L2_CID_FM_TX_CLASS_BASE + 112
v4l2_preemphasis = enum
(
        V4L2_PREEMPHASIS_DISABLED,
        V4L2_PREEMPHASIS_50_uS,
        V4L2_PREEMPHASIS_75_uS,
) = range(3)

V4L2_CID_TUNE_POWER_LEVEL               = V4L2_CID_FM_TX_CLASS_BASE + 113
V4L2_CID_TUNE_ANTENNA_CAPACITOR         = V4L2_CID_FM_TX_CLASS_BASE + 114


# Flash and privacy (indicator) light controls

V4L2_CID_FLASH_CLASS_BASE               = V4L2_CTRL_CLASS_FLASH | 0x900
V4L2_CID_FLASH_CLASS                    = V4L2_CTRL_CLASS_FLASH | 1

V4L2_CID_FLASH_LED_MODE                 = V4L2_CID_FLASH_CLASS_BASE + 1
v4l2_flash_led_mode = enum
(
        V4L2_FLASH_LED_MODE_NONE,
        V4L2_FLASH_LED_MODE_FLASH,
        V4L2_FLASH_LED_MODE_TORCH,
) = range(3)

V4L2_CID_FLASH_STROBE_SOURCE            = V4L2_CID_FLASH_CLASS_BASE + 2
v4l2_flash_strobe_source = enum
(
        V4L2_FLASH_STROBE_SOURCE_SOFTWARE,
        V4L2_FLASH_STROBE_SOURCE_EXTERNAL,
) = range(2)

V4L2_CID_FLASH_STROBE                   = V4L2_CID_FLASH_CLASS_BASE + 3
V4L2_CID_FLASH_STROBE_STOP              = V4L2_CID_FLASH_CLASS_BASE + 4
V4L2_CID_FLASH_STROBE_STATUS            = V4L2_CID_FLASH_CLASS_BASE + 5
V4L2_CID_FLASH_TIMEOUT                  = V4L2_CID_FLASH_CLASS_BASE + 6
V4L2_CID_FLASH_INTENSITY                = V4L2_CID_FLASH_CLASS_BASE + 7
V4L2_CID_FLASH_TORCH_INTENSITY          = V4L2_CID_FLASH_CLASS_BASE + 8
V4L2_CID_FLASH_INDICATOR_INTENSITY      = V4L2_CID_FLASH_CLASS_BASE + 9
V4L2_CID_FLASH_FAULT                    = V4L2_CID_FLASH_CLASS_BASE + 10
V4L2_FLASH_FAULT_OVER_VOLTAGE           = 1 << 0
V4L2_FLASH_FAULT_TIMEOUT                = 1 << 1
V4L2_FLASH_FAULT_OVER_TEMPERATURE       = 1 << 2
V4L2_FLASH_FAULT_SHORT_CIRCUIT          = 1 << 3
V4L2_FLASH_FAULT_OVER_CURRENT           = 1 << 4
V4L2_FLASH_FAULT_INDICATOR              = 1 << 5
V4L2_FLASH_FAULT_UNDER_VOLTAGE          = 1 << 6
V4L2_FLASH_FAULT_INPUT_VOLTAGE          = 1 << 7
V4L2_FLASH_FAULT_LED_OVER_TEMPERATURE   = 1 << 8

V4L2_CID_FLASH_CHARGE                   = V4L2_CID_FLASH_CLASS_BASE + 11
V4L2_CID_FLASH_READY                    = V4L2_CID_FLASH_CLASS_BASE + 12


# JPEG-class control IDs

V4L2_CID_JPEG_CLASS_BASE                = V4L2_CTRL_CLASS_JPEG | 0x900
V4L2_CID_JPEG_CLASS                     = V4L2_CTRL_CLASS_JPEG | 1

V4L2_CID_JPEG_CHROMA_SUBSAMPLING        = V4L2_CID_JPEG_CLASS_BASE + 1
v4l2_jpeg_chroma_subsampling = enum
(
        V4L2_JPEG_CHROMA_SUBSAMPLING_444,
        V4L2_JPEG_CHROMA_SUBSAMPLING_422,
        V4L2_JPEG_CHROMA_SUBSAMPLING_420,
        V4L2_JPEG_CHROMA_SUBSAMPLING_411,
        V4L2_JPEG_CHROMA_SUBSAMPLING_410,
        V4L2_JPEG_CHROMA_SUBSAMPLING_GRAY,
) = range(6)
V4L2_CID_JPEG_RESTART_INTERVAL          = V4L2_CID_JPEG_CLASS_BASE + 2
V4L2_CID_JPEG_COMPRESSION_QUALITY       = V4L2_CID_JPEG_CLASS_BASE + 3
V4L2_CID_JPEG_ACTIVE_MARKER             = V4L2_CID_JPEG_CLASS_BASE + 4
V4L2_JPEG_ACTIVE_MARKER_APP0            = 1 << 0
V4L2_JPEG_ACTIVE_MARKER_APP1            = 1 << 1
V4L2_JPEG_ACTIVE_MARKER_COM             = 1 << 16
V4L2_JPEG_ACTIVE_MARKER_DQT             = 1 << 17
V4L2_JPEG_ACTIVE_MARKER_DHT             = 1 << 18


# Image source controls
V4L2_CID_IMAGE_SOURCE_CLASS_BASE        = V4L2_CTRL_CLASS_IMAGE_SOURCE | 0x900
V4L2_CID_IMAGE_SOURCE_CLASS             = V4L2_CTRL_CLASS_IMAGE_SOURCE | 1

V4L2_CID_VBLANK                         = V4L2_CID_IMAGE_SOURCE_CLASS_BASE + 1
V4L2_CID_HBLANK                         = V4L2_CID_IMAGE_SOURCE_CLASS_BASE + 2
V4L2_CID_ANALOGUE_GAIN                  = V4L2_CID_IMAGE_SOURCE_CLASS_BASE + 3
V4L2_CID_TEST_PATTERN_RED               = V4L2_CID_IMAGE_SOURCE_CLASS_BASE + 4
V4L2_CID_TEST_PATTERN_GREENR            = V4L2_CID_IMAGE_SOURCE_CLASS_BASE + 5
V4L2_CID_TEST_PATTERN_BLUE              = V4L2_CID_IMAGE_SOURCE_CLASS_BASE + 6
V4L2_CID_TEST_PATTERN_GREENB            = V4L2_CID_IMAGE_SOURCE_CLASS_BASE + 7
V4L2_CID_MIPI_LANES                     = V4L2_CID_IMAGE_SOURCE_CLASS_BASE + 64
V4L2_CID_WDR_MODE                       = V4L2_CID_IMAGE_SOURCE_CLASS_BASE + 65
V4L2_CID_PWM_DUTY                       = V4L2_CID_IMAGE_SOURCE_CLASS_BASE + 66

# Image processing controls

V4L2_CID_IMAGE_PROC_CLASS_BASE          = V4L2_CTRL_CLASS_IMAGE_PROC | 0x900
V4L2_CID_IMAGE_PROC_CLASS               = V4L2_CTRL_CLASS_IMAGE_PROC | 1

V4L2_CID_LINK_FREQ                      = V4L2_CID_IMAGE_PROC_CLASS_BASE + 1
V4L2_CID_PIXEL_RATE                     = V4L2_CID_IMAGE_PROC_CLASS_BASE + 2
V4L2_CID_TEST_PATTERN                   = V4L2_CID_IMAGE_PROC_CLASS_BASE + 3
V4L2_CID_DEINTERLACING_MODE             = V4L2_CID_IMAGE_PROC_CLASS_BASE + 4
V4L2_CID_DIGITAL_GAIN                   = V4L2_CID_IMAGE_PROC_CLASS_BASE + 5

#  DV-class control IDs defined by V4L2
V4L2_CID_DV_CLASS_BASE                  = V4L2_CTRL_CLASS_DV | 0x900
V4L2_CID_DV_CLASS                       = V4L2_CTRL_CLASS_DV | 1

V4L2_CID_DV_TX_HOTPLUG                  = V4L2_CID_DV_CLASS_BASE + 1
V4L2_CID_DV_TX_RXSENSE                  = V4L2_CID_DV_CLASS_BASE + 2
V4L2_CID_DV_TX_EDID_PRESENT             = V4L2_CID_DV_CLASS_BASE + 3
V4L2_CID_DV_TX_MODE                     = V4L2_CID_DV_CLASS_BASE + 4
v4l2_dv_tx_mode = enum
(
        V4L2_DV_TX_MODE_DVI_D,
        V4L2_DV_TX_MODE_HDMI,
) = range(2)
V4L2_CID_DV_TX_RGB_RANGE                = V4L2_CID_DV_CLASS_BASE + 5
v4l2_dv_rgb_range = enum
(
        V4L2_DV_RGB_RANGE_AUTO,
        V4L2_DV_RGB_RANGE_LIMITED,
        V4L2_DV_RGB_RANGE_FULL,
) = range(3)

V4L2_CID_DV_TX_IT_CONTENT_TYPE          = V4L2_CID_DV_CLASS_BASE + 6
v4l2_dv_it_content_type = enum
(
        V4L2_DV_IT_CONTENT_TYPE_GRAPHICS,
        V4L2_DV_IT_CONTENT_TYPE_PHOTO,
        V4L2_DV_IT_CONTENT_TYPE_CINEMA,
        V4L2_DV_IT_CONTENT_TYPE_GAME,
        V4L2_DV_IT_CONTENT_TYPE_NO_ITC,
) = range(5)

V4L2_CID_DV_RX_POWER_PRESENT            = V4L2_CID_DV_CLASS_BASE + 100
V4L2_CID_DV_RX_RGB_RANGE                = V4L2_CID_DV_CLASS_BASE + 101
V4L2_CID_DV_RX_IT_CONTENT_TYPE          = V4L2_CID_DV_CLASS_BASE + 102
V4L2_CID_FM_RX_CLASS_BASE               = V4L2_CTRL_CLASS_FM_RX | 0x900
V4L2_CID_FM_RX_CLASS                    = V4L2_CTRL_CLASS_FM_RX | 1
V4L2_CID_TUNE_DEEMPHASIS                = V4L2_CID_FM_RX_CLASS_BASE + 1

v4l2_deemphasis = enum
V4L2_DEEMPHASIS_DISABLED                = V4L2_PREEMPHASIS_DISABLED
V4L2_DEEMPHASIS_50_uS                   = V4L2_PREEMPHASIS_50_uS
V4L2_DEEMPHASIS_75_uS                   = V4L2_PREEMPHASIS_75_uS

V4L2_CID_RDS_RECEPTION                  = V4L2_CID_FM_RX_CLASS_BASE + 2
V4L2_CID_RDS_RX_PTY                     = V4L2_CID_FM_RX_CLASS_BASE + 3
V4L2_CID_RDS_RX_PS_NAME                 = V4L2_CID_FM_RX_CLASS_BASE + 4
V4L2_CID_RDS_RX_RADIO_TEXT              = V4L2_CID_FM_RX_CLASS_BASE + 5
V4L2_CID_RDS_RX_TRAFFIC_ANNOUNCEMENT    = V4L2_CID_FM_RX_CLASS_BASE + 6
V4L2_CID_RDS_RX_TRAFFIC_PROGRAM         = V4L2_CID_FM_RX_CLASS_BASE + 7
V4L2_CID_RDS_RX_MUSIC_SPEECH            = V4L2_CID_FM_RX_CLASS_BASE + 8
V4L2_CID_RF_TUNER_CLASS_BASE            = V4L2_CTRL_CLASS_RF_TUNER | 0x900
V4L2_CID_RF_TUNER_CLASS                 = V4L2_CTRL_CLASS_RF_TUNER | 1
V4L2_CID_RF_TUNER_BANDWIDTH_AUTO        = V4L2_CID_RF_TUNER_CLASS_BASE + 11
V4L2_CID_RF_TUNER_BANDWIDTH             = V4L2_CID_RF_TUNER_CLASS_BASE + 12
V4L2_CID_RF_TUNER_RF_GAIN               = V4L2_CID_RF_TUNER_CLASS_BASE + 32
V4L2_CID_RF_TUNER_LNA_GAIN_AUTO         = V4L2_CID_RF_TUNER_CLASS_BASE + 41
V4L2_CID_RF_TUNER_LNA_GAIN              = V4L2_CID_RF_TUNER_CLASS_BASE + 42
V4L2_CID_RF_TUNER_MIXER_GAIN_AUTO       = V4L2_CID_RF_TUNER_CLASS_BASE + 51
V4L2_CID_RF_TUNER_MIXER_GAIN            = V4L2_CID_RF_TUNER_CLASS_BASE + 52
V4L2_CID_RF_TUNER_IF_GAIN_AUTO          = V4L2_CID_RF_TUNER_CLASS_BASE + 61
V4L2_CID_RF_TUNER_IF_GAIN               = V4L2_CID_RF_TUNER_CLASS_BASE + 62
V4L2_CID_RF_TUNER_PLL_LOCK              = V4L2_CID_RF_TUNER_CLASS_BASE + 91


#  Detection-class control IDs defined by V4L2
V4L2_CID_DETECT_CLASS_BASE              = V4L2_CTRL_CLASS_DETECT | 0x900
V4L2_CID_DETECT_CLASS                   = V4L2_CTRL_CLASS_DETECT | 1

V4L2_CID_DETECT_MD_MODE                 = V4L2_CID_DETECT_CLASS_BASE + 1
v4l2_detect_md_mode = enum
(
        V4L2_DETECT_MD_MODE_DISABLED,
        V4L2_DETECT_MD_MODE_GLOBAL,
        V4L2_DETECT_MD_MODE_THRESHOLD_GRID,
        V4L2_DETECT_MD_MODE_REGION_GRID,
) =range(4)

V4L2_CID_DETECT_MD_GLOBAL_THRESHOLD     = V4L2_CID_DETECT_CLASS_BASE + 2
V4L2_CID_DETECT_MD_THRESHOLD_GRID       = V4L2_CID_DETECT_CLASS_BASE + 3
V4L2_CID_DETECT_MD_REGION_GRID          = V4L2_CID_DETECT_CLASS_BASE + 4

# linux/v4l2-subdev.h

VIDEO_MAX_FRAME   = 32
VIDEO_MAX_PLANES  = 8

#  Four-character-code (FOURCC)
def v4l2_fourcc(a, b, c, d):
    return ord(a) | (ord(b) << 8) | (ord(c) << 16) | (ord(d) << 24)
def v4l2_fourcc_be(a, b, c, d):
    return v4l2_fourcc(a, b, c, d) | (1 << 31)
def v4l2_get_fmt(fourcc):
    return chr(fourcc & 0xff) + chr(fourcc >>8 & 0xff) + chr(fourcc >>16 & 0xff) + chr(fourcc >>24 & 0xff)

v4l2_field = enum
(
    V4L2_FIELD_ANY,
    V4L2_FIELD_NONE,
    V4L2_FIELD_TOP,
    V4L2_FIELD_BOTTOM,
    V4L2_FIELD_INTERLACED,
    V4L2_FIELD_SEQ_TB,
    V4L2_FIELD_SEQ_BT,
    V4L2_FIELD_ALTERNATE,
    V4L2_FIELD_INTERLACED_TB,
    V4L2_FIELD_INTERLACED_BT,
) = range(10)

def V4L2_FIELD_HAS_TOP(field):
    return (
    field == V4L2_FIELD_TOP or
    field == V4L2_FIELD_INTERLACED or
    field == V4L2_FIELD_INTERLACED_TB or
    field == V4L2_FIELD_INTERLACED_BT or
    field == V4L2_FIELD_SEQ_TB or
    field == V4L2_FIELD_SEQ_BT)

def V4L2_FIELD_HAS_BOTTOM(field):
    return (
    field == V4L2_FIELD_BOTTOM or
    field == V4L2_FIELD_INTERLACED or
    field == V4L2_FIELD_INTERLACED_TB or
    field == V4L2_FIELD_INTERLACED_BT or
    field == V4L2_FIELD_SEQ_TB or
    field == V4L2_FIELD_SEQ_BT)

def V4L2_FIELD_HAS_BOTH(field):
    return (
    field == V4L2_FIELD_INTERLACED or
    field == V4L2_FIELD_INTERLACED_TB or
    field == V4L2_FIELD_INTERLACED_BT or
    field == V4L2_FIELD_SEQ_TB or
    field == V4L2_FIELD_SEQ_BT)

def V4L2_FIELD_HAS_T_OR_B(field):
    return (
    field == V4L2_FIELD_BOTTOM or
    field == V4L2_FIELD_TOP or
    field == V4L2_FIELD_ALTERNATE)

v4l2_buf_type = enum
(
    V4L2_BUF_TYPE_VIDEO_CAPTURE,
    V4L2_BUF_TYPE_VIDEO_OUTPUT,
    V4L2_BUF_TYPE_VIDEO_OVERLAY,
    V4L2_BUF_TYPE_VBI_CAPTURE,
    V4L2_BUF_TYPE_VBI_OUTPUT,
    V4L2_BUF_TYPE_SLICED_VBI_CAPTURE,
    V4L2_BUF_TYPE_SLICED_VBI_OUTPUT,
    V4L2_BUF_TYPE_VIDEO_OUTPUT_OVERLAY,
    V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE,
    V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE,
    V4L2_BUF_TYPE_SDR_CAPTURE,
    V4L2_BUF_TYPE_SDR_OUTPUT,
    V4L2_BUF_TYPE_META_CAPTURE,
    V4L2_BUF_TYPE_PRIVATE,
) = list(range(1, 14)) + [0x80]

V4L2_BUF_TYPE_TYPE_MASK         = 0x000000ff
V4L2_BUF_TYPE_SUBSTREAM_MASK    = 0x0000ff00
V4L2_BUF_TYPE_SUBSTREAM_SHIFT   = 8

def V4L2_TYPE_IS_MULTIPLANAR(type):
    return (
    type == V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE or
    type == V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE)

def V4L2_TYPE_IS_OUTPUT(type):
    return (
    type == V4L2_BUF_TYPE_VIDEO_OUTPUT or
    type == V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE or
    type == V4L2_BUF_TYPE_VIDEO_OVERLAY    or
    type == V4L2_BUF_TYPE_VIDEO_OUTPUT_OVERLAY or
    type == V4L2_BUF_TYPE_VBI_OUTPUT or
    type == V4L2_BUF_TYPE_SLICED_VBI_OUTPUT    or
    type == V4L2_BUF_TYPE_SDR_OUTPUT)

v4l2_tuner_type = enum
(
    V4L2_TUNER_RADIO,
    V4L2_TUNER_ANALOG_TV,
    V4L2_TUNER_DIGITAL_TV,
    V4L2_TUNER_SDR,
    V4L2_TUNER_RF,
) = range(1,6)

# Deprecated, do not use
V4L2_TUNER_ADC  = V4L2_TUNER_SDR

v4l2_memory = enum
(
    V4L2_MEMORY_MMAP,
    V4L2_MEMORY_USERPTR,
    V4L2_MEMORY_OVERLAY,
    V4L2_MEMORY_DMABUF,
) = range(1,5)

# see also http://vektor.theorem.ca/graphics/ycbcr/
v4l2_colorspace  = enum
(
    V4L2_COLORSPACE_DEFAULT,
    V4L2_COLORSPACE_SMPTE170M,
    V4L2_COLORSPACE_SMPTE240M,
    V4L2_COLORSPACE_REC709,
    V4L2_COLORSPACE_BT878,
    V4L2_COLORSPACE_470_SYSTEM_M,
    V4L2_COLORSPACE_470_SYSTEM_BG,
    V4L2_COLORSPACE_JPEG,
    V4L2_COLORSPACE_SRGB,
    V4L2_COLORSPACE_ADOBERGB,
    V4L2_COLORSPACE_BT2020,
    V4L2_COLORSPACE_RAW,
    V4L2_COLORSPACE_DCI_P3,
) = range(13)

def V4L2_MAP_COLORSPACE_DEFAULT(is_sdtv, is_hdtv):
    return (
    V4L2_COLORSPACE_SMPTE170M if is_sdtv else
    V4L2_COLORSPACE_REC709 if is_hdtv else V4L2_COLORSPACE_SRGB)

v4l2_xfer_func = enum
(
    V4L2_XFER_FUNC_DEFAULT,
    V4L2_XFER_FUNC_709,
    V4L2_XFER_FUNC_SRGB,
    V4L2_XFER_FUNC_ADOBERGB,
    V4L2_XFER_FUNC_SMPTE240M,
    V4L2_XFER_FUNC_NONE,
    V4L2_XFER_FUNC_DCI_P3,
    V4L2_XFER_FUNC_SMPTE2084,
) = range(8)

def V4L2_MAP_XFER_FUNC_DEFAULT(colsp):
    return (
    V4L2_COLORSPACE_ADOBERGB if colsp == V4L2_COLORSPACE_ADOBERGB else
    V4L2_XFER_FUNC_ADOBERGB if colsp == V4L2_COLORSPACE_SMPTE240M else
    V4L2_XFER_FUNC_DCI_P3 if colsp == V4L2_COLORSPACE_DCI_P3 else
    V4L2_XFER_FUNC_NONE if colsp == V4L2_COLORSPACE_RAW else
    V4L2_XFER_FUNC_SRGB if (colsp == V4L2_COLORSPACE_SRGB or
    colsp == V4L2_COLORSPACE_JPEG) else
    V4L2_XFER_FUNC_709)

v4l2_ycbcr_encoding = enum
(
    V4L2_YCBCR_ENC_DEFAULT,
    V4L2_YCBCR_ENC_601,
    V4L2_YCBCR_ENC_709,
    V4L2_YCBCR_ENC_XV601,
    V4L2_YCBCR_ENC_XV709,
    V4L2_YCBCR_ENC_SYCC,
    V4L2_YCBCR_ENC_BT2020,
    V4L2_YCBCR_ENC_BT2020_CONST_LUM,
    V4L2_YCBCR_ENC_SMPTE240M,
) = range(9)

v4l2_hsv_encoding = enum
(
    V4L2_HSV_ENC_180,
    V4L2_HSV_ENC_256,
) = range(128,130)

def V4L2_MAP_YCBCR_ENC_DEFAULT(colsp):
    return (
    V4L2_YCBCR_ENC_709 if (colsp == V4L2_COLORSPACE_REC709 or
    colsp == V4L2_COLORSPACE_DCI_P3) else
    V4L2_YCBCR_ENC_BT2020 if colsp == V4L2_COLORSPACE_BT2020 else
    V4L2_YCBCR_ENC_SMPTE240M if colsp == V4L2_COLORSPACE_SMPTE240M else
    V4L2_YCBCR_ENC_601)

v4l2_quantization = enum
(
    V4L2_QUANTIZATION_DEFAULT,
    V4L2_QUANTIZATION_FULL_RANGE,
    V4L2_QUANTIZATION_LIM_RANGE,
) = range(3)

def V4L2_MAP_QUANTIZATION_DEFAULT(is_rgb_or_hsv, colsp, ycbcr_enc):
    return (
    V4L2_QUANTIZATION_LIM_RANGE if (is_rgb_or_hsv == 1 and colsp == V4L2_COLORSPACE_BT2020) else
    V4L2_QUANTIZATION_FULL_RANGE if (is_rgb_or_hsv == 1 or colsp == V4L2_COLORSPACE_JPEG) else
    V4L2_QUANTIZATION_LIM_RANGE)

v4l2_priority = enum
(
    V4L2_PRIORITY_UNSET,
    V4L2_PRIORITY_BACKGROUND,
    V4L2_PRIORITY_INTERACTIVE,
    V4L2_PRIORITY_RECORD,
    V4L2_PRIORITY_DEFAULT,
) = list(range(4)) + [2]

class v4l2_rect(ctypes.Structure):
    _fields_ = [
        ('left', ctypes.c_int32),
        ('top', ctypes.c_int32),
        ('width', ctypes.c_uint32),
        ('height', ctypes.c_uint32),
    ]

class v4l2_fract(ctypes.Structure):
    _fields_ = [
        ('numerator', ctypes.c_uint32),
        ('denominator', ctypes.c_uint32),
    ]

#
# Driver capabilities
#

class v4l2_capability(ctypes.Structure):
    _fields_ = [
        ('driver', ctypes.c_char * 16),
        ('card', ctypes.c_char * 32),
        ('bus_info', ctypes.c_char * 32),
        ('version', ctypes.c_uint32),
        ('capabilities', ctypes.c_uint32),
        ('device_caps', ctypes.c_uint32),
        ('reserved', ctypes.c_uint32 * 3),
    ]

# Values for 'capabilities' field
V4L2_CAP_VIDEO_CAPTURE          = 0x00000001  # Is a video capture device
V4L2_CAP_VIDEO_OUTPUT           = 0x00000002  # Is a video output device
V4L2_CAP_VIDEO_OVERLAY          = 0x00000004  # Can do video overlay
V4L2_CAP_VBI_CAPTURE            = 0x00000010  # Is a raw VBI capture device
V4L2_CAP_VBI_OUTPUT             = 0x00000020  # Is a raw VBI output device
V4L2_CAP_SLICED_VBI_CAPTURE     = 0x00000040  # Is a sliced VBI capture device
V4L2_CAP_SLICED_VBI_OUTPUT      = 0x00000080  # Is a sliced VBI output device
V4L2_CAP_RDS_CAPTURE            = 0x00000100  # RDS data capture
V4L2_CAP_VIDEO_OUTPUT_OVERLAY   = 0x00000200  # Can do video output overlay
V4L2_CAP_HW_FREQ_SEEK           = 0x00000400  # Can do hardware frequency seek
V4L2_CAP_RDS_OUTPUT             = 0x00000800  # Is an RDS encoder
V4L2_CAP_VIDEO_CAPTURE_MPLANE   = 0x00001000
V4L2_CAP_VIDEO_OUTPUT_MPLANE    = 0x00002000
V4L2_CAP_VIDEO_M2M_MPLANE       = 0x00004000
V4L2_CAP_VIDEO_M2M              = 0x00008000
V4L2_CAP_TUNER                  = 0x00010000  # has a tuner
V4L2_CAP_AUDIO                  = 0x00020000  # has audio support
V4L2_CAP_RADIO                  = 0x00040000  # is a radio device
V4L2_CAP_MODULATOR              = 0x00080000  # has a modulator
V4L2_CAP_SDR_CAPTURE            = 0x00100000  # Is a SDR capture device
V4L2_CAP_EXT_PIX_FORMAT         = 0x00200000  # Supports the extended pixel format
V4L2_CAP_SDR_OUTPUT             = 0x00400000  # Is a SDR output device
V4L2_CAP_META_CAPTURE           = 0x00800000  # Is a metadata capture device
V4L2_CAP_READWRITE              = 0x01000000  # read/write systemcalls
V4L2_CAP_ASYNCIO                = 0x02000000  # async I/O
V4L2_CAP_STREAMING              = 0x04000000  # streaming I/O ioctls
V4L2_CAP_TOUCH                  = 0x10000000  # Is a touch device
V4L2_CAP_DEVICE_CAPS            = 0x80000000  # sets device capabilities field

#
# Video image format
#

class v4l2_pix_format(ctypes.Structure):
    class _u(ctypes.Union):
        _fields_ = [
            ('ycbcr_enc', v4l2_ycbcr_encoding),
            ('hsv_enc', v4l2_hsv_encoding),
        ]

    _fields_ = [
        ('width', ctypes.c_uint32),
        ('height', ctypes.c_uint32),
        ('pixelformat', ctypes.c_uint32),
        ('field', v4l2_field),
        ('bytesperline', ctypes.c_uint32),
        ('sizeimage', ctypes.c_uint32),
        ('colorspace', v4l2_colorspace),
        ('priv', ctypes.c_uint32),
        ('flags', ctypes.c_uint32),
        ('_u', _u),
        ('quantization', v4l2_quantization),
        ('xfer_func', v4l2_xfer_func),
    ]

    _anonymous_ = ('_u',)

#  RGB formats
V4L2_PIX_FMT_RGB332         = v4l2_fourcc('R', 'G', 'B', '1') #  8  RGB-3-3-2
V4L2_PIX_FMT_RGB444         = v4l2_fourcc('R', '4', '4', '4') # 16  xxxxrrrr ggggbbbb
V4L2_PIX_FMT_ARGB444        = v4l2_fourcc('A', 'R', '1', '2') # 16  aaaarrrr ggggbbbb
V4L2_PIX_FMT_XRGB444        = v4l2_fourcc('X', 'R', '1', '2') # 16  xxxxrrrr ggggbbbb
V4L2_PIX_FMT_RGB555         = v4l2_fourcc('R', 'G', 'B', 'O') # 16  RGB-5-5-5
V4L2_PIX_FMT_ARGB555        = v4l2_fourcc('A', 'R', '1', '5') # 16  ARGB-1-5-5-5
V4L2_PIX_FMT_XRGB555        = v4l2_fourcc('X', 'R', '1', '5') # 16  XRGB-1-5-5-5
V4L2_PIX_FMT_RGB565         = v4l2_fourcc('R', 'G', 'B', 'P') # 16  RGB-5-6-5
V4L2_PIX_FMT_RGB555X        = v4l2_fourcc('R', 'G', 'B', 'Q') # 16  RGB-5-5-5 BE
V4L2_PIX_FMT_ARGB555X       = v4l2_fourcc_be('A', 'R', '1', '5') # 16  ARGB-5-5-5 BE
V4L2_PIX_FMT_XRGB555X       = v4l2_fourcc_be('X', 'R', '1', '5') # 16  XRGB-5-5-5 BE
V4L2_PIX_FMT_RGB565X        = v4l2_fourcc('R', 'G', 'B', 'R') # 16  RGB-5-6-5 BE
V4L2_PIX_FMT_BGR666         = v4l2_fourcc('B', 'G', 'R', 'H') # 18  BGR-6-6-6
V4L2_PIX_FMT_BGR24          = v4l2_fourcc('B', 'G', 'R', '3') # 24  BGR-8-8-8
V4L2_PIX_FMT_RGB24          = v4l2_fourcc('R', 'G', 'B', '3') # 24  RGB-8-8-8
V4L2_PIX_FMT_BGR32          = v4l2_fourcc('B', 'G', 'R', '4') # 32  BGR-8-8-8-8
V4L2_PIX_FMT_ABGR32         = v4l2_fourcc('A', 'R', '2', '4') # 32  BGRA-8-8-8-8
V4L2_PIX_FMT_XBGR32         = v4l2_fourcc('X', 'R', '2', '4') # 32  BGRX-8-8-8-8
V4L2_PIX_FMT_RGB32          = v4l2_fourcc('R', 'G', 'B', '4') # 32  RGB-8-8-8-8
V4L2_PIX_FMT_ARGB32         = v4l2_fourcc('B', 'A', '2', '4') # 32  ARGB-8-8-8-8
V4L2_PIX_FMT_XRGB32         = v4l2_fourcc('B', 'X', '2', '4') # 32  XRGB-8-8-8-8
# Grey formats
V4L2_PIX_FMT_GREY           = v4l2_fourcc('G', 'R', 'E', 'Y') #  8  Greyscale
V4L2_PIX_FMT_Y4             = v4l2_fourcc('Y', '0', '4', ' ') #  4  Greyscale
V4L2_PIX_FMT_Y6             = v4l2_fourcc('Y', '0', '6', ' ') #  6  Greyscale
V4L2_PIX_FMT_Y10            = v4l2_fourcc('Y', '1', '0', ' ') # 10  Greyscale
V4L2_PIX_FMT_Y12            = v4l2_fourcc('Y', '1', '2', ' ') # 12  Greyscale
V4L2_PIX_FMT_Y16            = v4l2_fourcc('Y', '1', '6', ' ') # 16  Greyscale
V4L2_PIX_FMT_Y16_BE         = v4l2_fourcc_be('Y', '1', '6', ' ') # 16  Greyscale BE
# Grey bit-packed formats
V4L2_PIX_FMT_Y10BPACK       = v4l2_fourcc('Y', '1', '0', 'B') # 10  Greyscale bit-packed
# Palette formats
V4L2_PIX_FMT_PAL8           = v4l2_fourcc('P', 'A', 'L', '8') #  8  8-bit palette
# Chrominance formats
V4L2_PIX_FMT_UV8            = v4l2_fourcc('U', 'V', '8', ' ') #  8  UV 4:4
# Luminance+Chrominance formats
V4L2_PIX_FMT_YUYV           = v4l2_fourcc('Y', 'U', 'Y', 'V') # 16  YUV 4:2:2
V4L2_PIX_FMT_YYUV           = v4l2_fourcc('Y', 'Y', 'U', 'V') # 16  YUV 4:2:2
V4L2_PIX_FMT_YVYU           = v4l2_fourcc('Y', 'V', 'Y', 'U') # 16 YVU 4:2:2
V4L2_PIX_FMT_UYVY           = v4l2_fourcc('U', 'Y', 'V', 'Y') # 16  YUV 4:2:2
V4L2_PIX_FMT_VYUY           = v4l2_fourcc('V', 'Y', 'U', 'Y') # 16  YUV 4:2:2
V4L2_PIX_FMT_Y41P           = v4l2_fourcc('Y', '4', '1', 'P') # 12  YUV 4:1:1
V4L2_PIX_FMT_YUV444         = v4l2_fourcc('Y', '4', '4', '4') # 16  xxxxyyyy uuuuvvvv
V4L2_PIX_FMT_YUV555         = v4l2_fourcc('Y', 'U', 'V', 'O') # 16  YUV-5-5-5
V4L2_PIX_FMT_YUV565         = v4l2_fourcc('Y', 'U', 'V', 'P') # 16  YUV-5-6-5
V4L2_PIX_FMT_YUV32          = v4l2_fourcc('Y', 'U', 'V', '4') # 32  YUV-8-8-8-8
V4L2_PIX_FMT_HI240          = v4l2_fourcc('H', 'I', '2', '4') #  8  8-bit color
V4L2_PIX_FMT_HM12           = v4l2_fourcc('H', 'M', '1', '2') #  8  YUV 4:2:0 16x16 macroblocks
V4L2_PIX_FMT_M420           = v4l2_fourcc('M', '4', '2', '0') # 12  YUV 4:2:0 2 lines y, 1 line uv interleaved

# two planes -- one Y, one Cr + Cb interleaved 
V4L2_PIX_FMT_NV12           = v4l2_fourcc('N', 'V', '1', '2') # 12  Y/CbCr 4:2:0
V4L2_PIX_FMT_NV21           = v4l2_fourcc('N', 'V', '2', '1') # 12  Y/CrCb 4:2:0
V4L2_PIX_FMT_NV16           = v4l2_fourcc('N', 'V', '1', '6') # 16  Y/CbCr 4:2:2
V4L2_PIX_FMT_NV61           = v4l2_fourcc('N', 'V', '6', '1') # 16  Y/CrCb 4:2:2
V4L2_PIX_FMT_NV24           = v4l2_fourcc('N', 'V', '2', '4') # 24  Y/CbCr 4:4:4
V4L2_PIX_FMT_NV42           = v4l2_fourcc('N', 'V', '4', '2') # 24  Y/CrCb 4:4:4

# two non contiguous planes - one Y, one Cr + Cb interleaved 
V4L2_PIX_FMT_NV12M          = v4l2_fourcc('N', 'M', '1', '2') # 12  Y/CbCr 4:2:0
V4L2_PIX_FMT_NV21M          = v4l2_fourcc('N', 'M', '2', '1') # 21  Y/CrCb 4:2:0
V4L2_PIX_FMT_NV16M          = v4l2_fourcc('N', 'M', '1', '6') # 16  Y/CbCr 4:2:2
V4L2_PIX_FMT_NV61M          = v4l2_fourcc('N', 'M', '6', '1') # 16  Y/CrCb 4:2:2
V4L2_PIX_FMT_NV12MT         = v4l2_fourcc('T', 'M', '1', '2') # 12  Y/CbCr 4:2:0 64x32 macroblocks
V4L2_PIX_FMT_NV12MT_16X16   = v4l2_fourcc('V', 'M', '1', '2') # 12  Y/CbCr 4:2:0 16x16 macroblocks

# three planes - Y Cb, Cr
V4L2_PIX_FMT_YUV410         = v4l2_fourcc('Y', 'U', 'V', '9') #  9  YUV 4:1:0
V4L2_PIX_FMT_YVU410         = v4l2_fourcc('Y', 'V', 'U', '9') #  9  YVU 4:1:0
V4L2_PIX_FMT_YUV411P        = v4l2_fourcc('4', '1', '1', 'P') # 12  YVU411 planar
V4L2_PIX_FMT_YUV420         = v4l2_fourcc('Y', 'U', '1', '2') # 12  YUV 4:2:0
V4L2_PIX_FMT_YVU420         = v4l2_fourcc('Y', 'V', '1', '2') # 12  YVU 4:2:0
V4L2_PIX_FMT_YUV422P        = v4l2_fourcc('4', '2', '2', 'P') # 16  YVU422 planar

# three non contiguous planes - Y, Cb, Cr
V4L2_PIX_FMT_YUV420M        = v4l2_fourcc('Y', 'M', '1', '2') # 12  YUV420 planar
V4L2_PIX_FMT_YVU420M        = v4l2_fourcc('Y', 'M', '2', '1') # 12  YVU420 planar
V4L2_PIX_FMT_YUV422M        = v4l2_fourcc('Y', 'M', '1', '6') # 16  YUV422 planar
V4L2_PIX_FMT_YVU422M        = v4l2_fourcc('Y', 'M', '6', '1') # 16  YVU422 planar
V4L2_PIX_FMT_YUV444M        = v4l2_fourcc('Y', 'M', '2', '4') # 24  YUV444 planar
V4L2_PIX_FMT_YVU444M        = v4l2_fourcc('Y', 'M', '4', '2') # 24  YVU444 planar

# Bayer formats - see http://www.siliconimaging.com/RGB%20Bayer.htm
V4L2_PIX_FMT_SBGGR8         = v4l2_fourcc('B', 'A', '8', '1') #  8  BGBG.. GRGR..
V4L2_PIX_FMT_SGBRG8         = v4l2_fourcc('G', 'B', 'R', 'G') #  8  GBGB.. RGRG..
V4L2_PIX_FMT_SGRBG8         = v4l2_fourcc('G', 'R', 'B', 'G') #  8  GRGR.. BGBG..
V4L2_PIX_FMT_SRGGB8         = v4l2_fourcc('R', 'G', 'G', 'B') #  8  RGRG.. GBGB..
V4L2_PIX_FMT_SBGGR10        = v4l2_fourcc('B', 'G', '1', '0') # 10  BGBG.. GRGR..
V4L2_PIX_FMT_SGBRG10        = v4l2_fourcc('G', 'B', '1', '0') # 10  GBGB.. RGRG..
V4L2_PIX_FMT_SGRBG10        = v4l2_fourcc('B', 'A', '1', '0') # 10  GRGR.. BGBG..
V4L2_PIX_FMT_SRGGB10        = v4l2_fourcc('R', 'G', '1', '0') # 10  RGRG.. GBGB..
# 10bit raw bayer packed, 5 bytes for every 4 pixels
V4L2_PIX_FMT_SBGGR10P       = v4l2_fourcc('p', 'B', 'A', 'A')
V4L2_PIX_FMT_SGBRG10P       = v4l2_fourcc('p', 'G', 'A', 'A')
V4L2_PIX_FMT_SGRBG10P       = v4l2_fourcc('p', 'g', 'A', 'A')
V4L2_PIX_FMT_SRGGB10P       = v4l2_fourcc('p', 'R', 'A', 'A')
# 10bit raw bayer a-law compressed to 8 bits
V4L2_PIX_FMT_SBGGR10ALAW8   = v4l2_fourcc('a', 'B', 'A', '8')
V4L2_PIX_FMT_SGBRG10ALAW8   = v4l2_fourcc('a', 'G', 'A', '8')
V4L2_PIX_FMT_SGRBG10ALAW8   = v4l2_fourcc('a', 'g', 'A', '8')
V4L2_PIX_FMT_SRGGB10ALAW8   = v4l2_fourcc('a', 'R', 'A', '8')
# 10bit raw bayer DPCM compressed to 8 bits
V4L2_PIX_FMT_SBGGR10DPCM8   = v4l2_fourcc('b', 'B', 'A', '8')
V4L2_PIX_FMT_SGBRG10DPCM8   = v4l2_fourcc('b', 'G', 'A', '8')
V4L2_PIX_FMT_SGRBG10DPCM8   = v4l2_fourcc('B', 'D', '1', '0')
V4L2_PIX_FMT_SRGGB10DPCM8   = v4l2_fourcc('b', 'R', 'A', '8')
V4L2_PIX_FMT_SBGGR12        = v4l2_fourcc('B', 'G', '1', '2') # 12  BGBG.. GRGR..
V4L2_PIX_FMT_SGBRG12        = v4l2_fourcc('G', 'B', '1', '2') # 12  GBGB.. RGRG..
V4L2_PIX_FMT_SGRBG12        = v4l2_fourcc('B', 'A', '1', '2') # 12  GRGR.. BGBG..
V4L2_PIX_FMT_SRGGB12        = v4l2_fourcc('R', 'G', '1', '2') # 12  RGRG.. GBGB..
# 12bit raw bayer packed, 6 bytes for every 4 pixels
V4L2_PIX_FMT_SBGGR12P       = v4l2_fourcc('p', 'B', 'C', 'C')
V4L2_PIX_FMT_SGBRG12P       = v4l2_fourcc('p', 'G', 'C', 'C')
V4L2_PIX_FMT_SGRBG12P       = v4l2_fourcc('p', 'g', 'C', 'C')
V4L2_PIX_FMT_SRGGB12P       = v4l2_fourcc('p', 'R', 'C', 'C')
V4L2_PIX_FMT_SBGGR14        = v4l2_fourcc('B', 'G', '1', '4') # 14  BGBG.. GRGR..
V4L2_PIX_FMT_SGBRG14        = v4l2_fourcc('G', 'B', '1', '4') # 14  GBGB.. RGRG..
V4L2_PIX_FMT_SGRBG14        = v4l2_fourcc('B', 'A', '1', '4') # 14  GRGR.. BGBG..
V4L2_PIX_FMT_SRGGB14        = v4l2_fourcc('R', 'G', '1', '4') # 14  RGRG.. GBGB..
# 14bit raw bayer packed, 7 bytes for every 4 pixels
V4L2_PIX_FMT_SBGGR14P       = v4l2_fourcc('p', 'B', 'E', 'E')
V4L2_PIX_FMT_SGBRG14P       = v4l2_fourcc('p', 'G', 'E', 'E')
V4L2_PIX_FMT_SGRBG14P       = v4l2_fourcc('p', 'g', 'E', 'E')
V4L2_PIX_FMT_SRGGB14P       = v4l2_fourcc('p', 'R', 'E', 'E')
V4L2_PIX_FMT_SBGGR16        = v4l2_fourcc('B', 'Y', 'R', '2') # 16  BGBG.. GRGR..
V4L2_PIX_FMT_SGBRG16        = v4l2_fourcc('G', 'B', '1', '6') # 16  GBGB.. RGRG..
V4L2_PIX_FMT_SGRBG16        = v4l2_fourcc('G', 'R', '1', '6') # 16  GRGR.. BGBG..
V4L2_PIX_FMT_SRGGB16        = v4l2_fourcc('R', 'G', '1', '6') # 16  RGRG.. GBGB..

# Raw bayer vector formats.
V4L2_PIX_FMT_SBGGR8_16V32   = v4l2_fourcc('b', 'V', '0', 'A')
V4L2_PIX_FMT_SGBRG8_16V32   = v4l2_fourcc('b', 'V', '0', 'B')
V4L2_PIX_FMT_SGRBG8_16V32   = v4l2_fourcc('b', 'V', '0', 'C')
V4L2_PIX_FMT_SRGGB8_16V32   = v4l2_fourcc('b', 'V', '0', 'D')
V4L2_PIX_FMT_SBGGR10V32     = v4l2_fourcc('b', 'V', '0', 'E')
V4L2_PIX_FMT_SGBRG10V32     = v4l2_fourcc('b', 'V', '0', 'F')
V4L2_PIX_FMT_SGRBG10V32     = v4l2_fourcc('b', 'V', '0', 'G')
V4L2_PIX_FMT_SRGGB10V32     = v4l2_fourcc('b', 'V', '0', 'H')
V4L2_PIX_FMT_SBGGR12V32     = v4l2_fourcc('b', 'V', '0', 'I')
V4L2_PIX_FMT_SGBRG12V32     = v4l2_fourcc('b', 'V', '0', 'J')
V4L2_PIX_FMT_SGRBG12V32     = v4l2_fourcc('b', 'V', '0', 'K')
V4L2_PIX_FMT_SRGGB12V32     = v4l2_fourcc('b', 'V', '0', 'L')

# BEGIN remove once the user space has been updated
V4L2_PIX_FMT_SBGGR8V32      = v4l2_fourcc('b', 'V', '0', 'A')
V4L2_PIX_FMT_SGBRG8V32      = v4l2_fourcc('b', 'V', '0', 'B')
V4L2_PIX_FMT_SGRBG8V32      = v4l2_fourcc('b', 'V', '0', 'C')
V4L2_PIX_FMT_SRGGB8V32      = v4l2_fourcc('b', 'V', '0', 'D')
# END remove once the user space has been updated

# YUV vector formats.
V4L2_PIX_FMT_UYVY_V32       = v4l2_fourcc('y', 'V', '3', '2')
V4L2_PIX_FMT_YUYV420_V32    = v4l2_fourcc('y', '0', '3', '2')

# HSV formats
V4L2_PIX_FMT_HSV24          = v4l2_fourcc('H', 'S', 'V', '3')
V4L2_PIX_FMT_HSV32          = v4l2_fourcc('H', 'S', 'V', '4')

# compressed formats
V4L2_PIX_FMT_MJPEG          = v4l2_fourcc('M', 'J', 'P', 'G') # Motion-JPEG
V4L2_PIX_FMT_JPEG           = v4l2_fourcc('J', 'P', 'E', 'G') # JFIF JPEG
V4L2_PIX_FMT_DV             = v4l2_fourcc('d', 'v', 's', 'd') # 1394
V4L2_PIX_FMT_MPEG           = v4l2_fourcc('M', 'P', 'E', 'G') # MPEG-1/2/4 Multiplexed
V4L2_PIX_FMT_H264           = v4l2_fourcc('H', '2', '6', '4') # H264 with start codes
V4L2_PIX_FMT_H264_NO_SC     = v4l2_fourcc('A', 'V', 'C', '1') # H264 without start codes
V4L2_PIX_FMT_H264_MVC       = v4l2_fourcc('M', '2', '6', '4') # H264 MVC
V4L2_PIX_FMT_H263           = v4l2_fourcc('H', '2', '6', '3') # H263
V4L2_PIX_FMT_MPEG1          = v4l2_fourcc('M', 'P', 'G', '1') # MPEG-1 ES
V4L2_PIX_FMT_MPEG2          = v4l2_fourcc('M', 'P', 'G', '2') # MPEG-2 ES
V4L2_PIX_FMT_MPEG4          = v4l2_fourcc('M', 'P', 'G', '4') # MPEG-4 part 2 ES
V4L2_PIX_FMT_XVID           = v4l2_fourcc('X', 'V', 'I', 'D') # Xvid
V4L2_PIX_FMT_VC1_ANNEX_G    = v4l2_fourcc('V', 'C', '1', 'G') # SMPTE 421M Annex G compliant stream
V4L2_PIX_FMT_VC1_ANNEX_L    = v4l2_fourcc('V', 'C', '1', 'L') # SMPTE 421M Annex L compliant stream
V4L2_PIX_FMT_VP8            = v4l2_fourcc('V', 'P', '8', '0') # VP8
V4L2_PIX_FMT_VP9            = v4l2_fourcc('V', 'P', '9', '0') # VP9

#  Vendor-specific formats  
V4L2_PIX_FMT_CPIA1          = v4l2_fourcc('C', 'P', 'I', 'A') # cpia1 YUV
V4L2_PIX_FMT_WNVA           = v4l2_fourcc('W', 'N', 'V', 'A') # Winnov hw compress
V4L2_PIX_FMT_SN9C10X        = v4l2_fourcc('S', '9', '1', '0') # SN9C10x compression
V4L2_PIX_FMT_SN9C20X_I420   = v4l2_fourcc('S', '9', '2', '0') # SN9C20x YUV 4:2:0
V4L2_PIX_FMT_PWC1           = v4l2_fourcc('P', 'W', 'C', '1') # pwc older webcam
V4L2_PIX_FMT_PWC2           = v4l2_fourcc('P', 'W', 'C', '2') # pwc newer webcam
V4L2_PIX_FMT_ET61X251       = v4l2_fourcc('E', '6', '2', '5') # ET61X251 compression
V4L2_PIX_FMT_SPCA501        = v4l2_fourcc('S', '5', '0', '1') # YUYV per line
V4L2_PIX_FMT_SPCA505        = v4l2_fourcc('S', '5', '0', '5') # YYUV per line
V4L2_PIX_FMT_SPCA508        = v4l2_fourcc('S', '5', '0', '8') # YUVY per line
V4L2_PIX_FMT_SPCA561        = v4l2_fourcc('S', '5', '6', '1') # compressed GBRG bayer
V4L2_PIX_FMT_PAC207         = v4l2_fourcc('P', '2', '0', '7') # compressed BGGR bayer
V4L2_PIX_FMT_MR97310A       = v4l2_fourcc('M', '3', '1', '0') # compressed BGGR bayer
V4L2_PIX_FMT_JL2005BCD      = v4l2_fourcc('J', 'L', '2', '0') # compressed RGGB bayer
V4L2_PIX_FMT_SN9C2028       = v4l2_fourcc('S', 'O', 'N', 'X') # compressed GBRG bayer
V4L2_PIX_FMT_SQ905C         = v4l2_fourcc('9', '0', '5', 'C') # compressed RGGB bayer
V4L2_PIX_FMT_PJPG           = v4l2_fourcc('P', 'J', 'P', 'G') # Pixart 73xx JPEG
V4L2_PIX_FMT_OV511          = v4l2_fourcc('O', '5', '1', '1') # ov511 JPEG
V4L2_PIX_FMT_OV518          = v4l2_fourcc('O', '5', '1', '8') # ov518 JPEG
V4L2_PIX_FMT_STV0680        = v4l2_fourcc('S', '6', '8', '0') # stv0680 bayer
V4L2_PIX_FMT_TM6000         = v4l2_fourcc('T', 'M', '6', '0') # tm5600/tm60x0
V4L2_PIX_FMT_CIT_YYVYUY     = v4l2_fourcc('C', 'I', 'T', 'V') # one line of Y then 1 line of VYUY
V4L2_PIX_FMT_KONICA420      = v4l2_fourcc('K', 'O', 'N', 'I') # YUV420 planar in blocks of 256 pixels
V4L2_PIX_FMT_JPGL           = v4l2_fourcc('J', 'P', 'G', 'L') # JPEG-Lite
V4L2_PIX_FMT_SE401          = v4l2_fourcc('S', '4', '0', '1') # se401 janggu compressed rgb
V4L2_PIX_FMT_S5C_UYVY_JPG   = v4l2_fourcc('S', '5', 'C', 'I') # S5C73M3 interleaved UYVY/JPEG
V4L2_PIX_FMT_Y8I            = v4l2_fourcc('Y', '8', 'I', ' ') # Greyscale 8-bit L/R interleaved
V4L2_PIX_FMT_Y12I           = v4l2_fourcc('Y', '1', '2', 'I') # Greyscale 12-bit L/R interleaved
V4L2_PIX_FMT_Z16            = v4l2_fourcc('Z', '1', '6', ' ') # Depth data 16-bit
V4L2_PIX_FMT_MT21C          = v4l2_fourcc('M', 'T', '2', '1') # Mediatek compressed block mode
V4L2_PIX_FMT_INZI           = v4l2_fourcc('I', 'N', 'Z', 'I') # Intel Planar Greyscale 10-bit and Depth 16-bit

# SDR formats - used only for Software Defined Radio devices
V4L2_SDR_FMT_CU8            = v4l2_fourcc('C', 'U', '0', '8') # IQ u8
V4L2_SDR_FMT_CU16LE         = v4l2_fourcc('C', 'U', '1', '6') # IQ u16le
V4L2_SDR_FMT_CS8            = v4l2_fourcc('C', 'S', '0', '8') # complex s8
V4L2_SDR_FMT_CS14LE         = v4l2_fourcc('C', 'S', '1', '4') # complex s14le
V4L2_SDR_FMT_RU12LE         = v4l2_fourcc('R', 'U', '1', '2') # real u12le
V4L2_SDR_FMT_PCU16BE        = v4l2_fourcc('P', 'C', '1', '6') # planar complex u16be
V4L2_SDR_FMT_PCU18BE        = v4l2_fourcc('P', 'C', '1', '8') # planar complex u18be
V4L2_SDR_FMT_PCU20BE        = v4l2_fourcc('P', 'C', '2', '0') # planar complex u20be

# Touch formats - used for Touch devices
V4L2_TCH_FMT_DELTA_TD16     = v4l2_fourcc('T', 'D', '1', '6') # 16-bit signed deltas
V4L2_TCH_FMT_DELTA_TD08     = v4l2_fourcc('T', 'D', '0', '8') # 8-bit signed deltas
V4L2_TCH_FMT_TU16           = v4l2_fourcc('T', 'U', '1', '6') # 16-bit unsigned touch data
V4L2_TCH_FMT_TU08           = v4l2_fourcc('T', 'U', '0', '8') # 8-bit unsigned touch data

# Meta-data formats
V4L2_META_FMT_VSP1_HGO      = v4l2_fourcc('V', 'S', 'P', 'H') # R-Car VSP1 1-D Histogram
V4L2_META_FMT_VSP1_HGT      = v4l2_fourcc('V', 'S', 'P', 'T') # R-Car VSP1 2-D Histogram

# priv field value to indicates that subsequent fields are valid.
V4L2_PIX_FMT_PRIV_MAGIC         = 0xfeedcafe
# Flags
V4L2_PIX_FMT_FLAG_PREMUL_ALPHA  = 0x00000001

class v4l2_fmtdesc(ctypes.Structure):
    _fields_ = [
        ('index', ctypes.c_uint32),
        ('type', ctypes.c_int),
        ('flags', ctypes.c_uint32),
        ('description', ctypes.c_char * 32),
        ('pixelformat', ctypes.c_uint32),
        ('reserved', ctypes.c_uint32 * 4),
    ]

V4L2_FMT_FLAG_COMPRESSED = 0x0001
V4L2_FMT_FLAG_EMULATED   = 0x0002

v4l2_frmsizetypes = enum
(
    V4L2_FRMSIZE_TYPE_DISCRETE,
    V4L2_FRMSIZE_TYPE_CONTINUOUS,
    V4L2_FRMSIZE_TYPE_STEPWISE,
) = range(1,4)

class v4l2_frmsize_discrete(ctypes.Structure):
    _fields_ = [
        ('width', ctypes.c_uint32),
        ('height', ctypes.c_uint32),
    ]

class v4l2_frmsize_stepwise(ctypes.Structure):
    _fields_ = [
        ('min_width', ctypes.c_uint32),
        ('min_height', ctypes.c_uint32),
        ('step_width', ctypes.c_uint32),
        ('min_height', ctypes.c_uint32),
        ('max_height', ctypes.c_uint32),
        ('step_height', ctypes.c_uint32),
    ]

class v4l2_frmsizeenum(ctypes.Structure):
    class _u(ctypes.Union):
        _fields_ = [
            ('discrete', v4l2_frmsize_discrete),
            ('stepwise', v4l2_frmsize_stepwise),
        ]

    _fields_ = [
        ('index', ctypes.c_uint32),
        ('pixel_format', ctypes.c_uint32),
        ('type', ctypes.c_uint32),
        ('_u', _u),
        ('reserved', ctypes.c_uint32 * 2)
    ]

    _anonymous_ = ('_u',)

v4l2_frmivaltypes = enum
(
    V4L2_FRMIVAL_TYPE_DISCRETE,
    V4L2_FRMIVAL_TYPE_CONTINUOUS,
    V4L2_FRMIVAL_TYPE_STEPWISE,
) = range(1, 4)

class v4l2_frmival_stepwise(ctypes.Structure):
    _fields_ = [
        ('min', v4l2_fract),
        ('max', v4l2_fract),
        ('step', v4l2_fract),
    ]

class v4l2_frmivalenum(ctypes.Structure):
    class _u(ctypes.Union):
        _fields_ = [
            ('discrete', v4l2_fract),
            ('stepwise', v4l2_frmival_stepwise),
        ]

    _fields_ = [
        ('index', ctypes.c_uint32),
        ('pixel_format', ctypes.c_uint32),
        ('width', ctypes.c_uint32),
        ('height', ctypes.c_uint32),
        ('type', ctypes.c_uint32),
        ('_u', _u),
    ('reserved', ctypes.c_uint32 * 2),
    ]

    _anonymous_ = ('_u',)

class v4l2_timecode(ctypes.Structure):
    _fields_ = [
        ('type', ctypes.c_uint32),
        ('flags', ctypes.c_uint32),
        ('frames', ctypes.c_uint8),
        ('seconds', ctypes.c_uint8),
        ('minutes', ctypes.c_uint8),
        ('hours', ctypes.c_uint8),
        ('userbits', ctypes.c_uint8 * 4),
    ]

#  Type 
V4L2_TC_TYPE_24FPS        = 1
V4L2_TC_TYPE_25FPS        = 2
V4L2_TC_TYPE_30FPS        = 3
V4L2_TC_TYPE_50FPS        = 4
V4L2_TC_TYPE_60FPS        = 5

#  Flags 
V4L2_TC_FLAG_DROPFRAME          = 0x0001 # "drop-frame" mode
V4L2_TC_FLAG_COLORFRAME         = 0x0002
V4L2_TC_USERBITS_field          = 0x000C
V4L2_TC_USERBITS_USERDEFINED    = 0x0000
V4L2_TC_USERBITS_8BITCHARS      = 0x0008
# The above is based on SMPTE timecodes

class v4l2_jpegcompression(ctypes.Structure):
    _fields_ = [
        ('quality', ctypes.c_int),
        ('APPn', ctypes.c_int),
        ('APP_len', ctypes.c_int),
        ('APP_data', ctypes.c_char * 60),
        ('COM_len', ctypes.c_int),
        ('COM_data', ctypes.c_char * 60),
        ('jpeg_markers', ctypes.c_uint32),
    ]


V4L2_JPEG_MARKER_DHT = 1 << 3    # Define Huffman Tables
V4L2_JPEG_MARKER_DQT = 1 << 4    # Define Quantization Tables
V4L2_JPEG_MARKER_DRI = 1 << 5    # Define Restart Interval
V4L2_JPEG_MARKER_COM = 1 << 6    # Comment segment
V4L2_JPEG_MARKER_APP = 1 << 7    # App segment, driver will always use APP0

class v4l2_requestbuffers(ctypes.Structure):
    _fields_ = [
        ('count', ctypes.c_uint32),
        ('type', v4l2_buf_type),
        ('memory', v4l2_memory),
        ('reserved', ctypes.c_uint32 * 2),
    ]

class v4l2_plane(ctypes.Structure):
    class _u(ctypes.Union):
        _fields_ = [
                ('mem_offset', ctypes.c_uint32),
                ('userptr', ctypes.c_ulong),
                ('fd', ctypes.c_int32),
        ]

    _fields_ = [
        ('bytesused', ctypes.c_uint32),
        ('length', ctypes.c_uint32),
        ('m', _u),
        ('data_offset', ctypes.c_uint32),
        ('reserved', ctypes.c_uint32 * 11),
    ]

class v4l2_buffer(ctypes.Structure):
    class _u(ctypes.Union):
        _fields_ = [
            ('offset', ctypes.c_uint32),
            ('userptr', ctypes.c_ulong),
            ('planes', ctypes.POINTER(v4l2_plane)),
            ('fd', ctypes.c_int32),
        ]

    _fields_ = [
        ('index', ctypes.c_uint32),
        ('type', v4l2_buf_type),
        ('bytesused', ctypes.c_uint32),
        ('flags', ctypes.c_uint32),
        ('field', v4l2_field),
        ('timestamp', timeval),
        ('timecode', v4l2_timecode),
        ('sequence', ctypes.c_uint32),
        ('memory', v4l2_memory),
        ('m', _u),
        ('length', ctypes.c_uint32),
        ('request', ctypes.c_uint32),
        ('reserved', ctypes.c_uint32),
    ]

#  Flags for 'flags' field
# Buffer is mapped (flag)
V4L2_BUF_FLAG_MAPPED                = 0x00000001
# Buffer is queued for processing
V4L2_BUF_FLAG_QUEUED                = 0x00000002
# Buffer is ready
V4L2_BUF_FLAG_DONE                  = 0x00000004
# Image is a keyframe (I-frame)
V4L2_BUF_FLAG_KEYFRAME              = 0x00000008
# Image is a P-frame
V4L2_BUF_FLAG_PFRAME                = 0x00000010
# Image is a B-frame
V4L2_BUF_FLAG_BFRAME                = 0x00000020
# Buffer is ready, but the data contained within is corrupted.
V4L2_BUF_FLAG_ERROR                 = 0x00000040
# timecode field is valid
V4L2_BUF_FLAG_TIMECODE              = 0x00000100
# Buffer is prepared for queuing
V4L2_BUF_FLAG_PREPARED              = 0x00000400
# Cache handling flags
V4L2_BUF_FLAG_NO_CACHE_INVALIDATE   = 0x00000800
V4L2_BUF_FLAG_NO_CACHE_CLEAN        = 0x00001000
# Timestamp type
V4L2_BUF_FLAG_TIMESTAMP_MASK        = 0x0000e000
V4L2_BUF_FLAG_TIMESTAMP_UNKNOWN     = 0x00000000
V4L2_BUF_FLAG_TIMESTAMP_MONOTONIC   = 0x00002000
V4L2_BUF_FLAG_TIMESTAMP_COPY        = 0x00004000
# Timestamp sources.
V4L2_BUF_FLAG_TSTAMP_SRC_MASK       = 0x00070000
V4L2_BUF_FLAG_TSTAMP_SRC_EOF        = 0x00000000
V4L2_BUF_FLAG_TSTAMP_SRC_SOE        = 0x00010000
# mem2mem encoder/decoder
V4L2_BUF_FLAG_LAST                  = 0x00100000

class v4l2_exportbuffer(ctypes.Structure):
    _fields_ = [
            ('type', v4l2_buf_type),
            ('index', ctypes.c_uint32),
            ('plane', ctypes.c_uint32),
            ('flags', ctypes.c_uint32),
            ('fd', ctypes.c_int32),
            ('reserved', ctypes.c_uint32 * 11),
    ]

class v4l2_framebuffer(ctypes.Structure):
    class _s(ctypes.Structure):
        _fields_ = [
            ('width', ctypes.c_uint32),
            ('height', ctypes.c_uint32),
            ('pixelformat', ctypes.c_uint32),
            ('field', ctypes.c_uint32),
            ('bytesperline', ctypes.c_uint32),
            ('sizeimage', ctypes.c_uint32),
            ('colorspace', ctypes.c_uint32),
            ('priv', ctypes.c_uint32),
        ]

    _fields_ = [
        ('capability', ctypes.c_uint32),
        ('flags', ctypes.c_uint32),
        ('base', ctypes.c_void_p),
        ('fmt', _s),
    ]

#  Flags for the 'capability' field. Read only
V4L2_FBUF_CAP_EXTERNOVERLAY     = 0x0001
V4L2_FBUF_CAP_CHROMAKEY         = 0x0002
V4L2_FBUF_CAP_LIST_CLIPPING     = 0x0004
V4L2_FBUF_CAP_BITMAP_CLIPPING   = 0x0008
V4L2_FBUF_CAP_LOCAL_ALPHA       = 0x0010
V4L2_FBUF_CAP_GLOBAL_ALPHA      = 0x0020
V4L2_FBUF_CAP_LOCAL_INV_ALPHA   = 0x0040
V4L2_FBUF_CAP_SRC_CHROMAKEY     = 0x0080
#  Flags for the 'flags' field.
V4L2_FBUF_FLAG_PRIMARY          = 0x0001
V4L2_FBUF_FLAG_OVERLAY          = 0x0002
V4L2_FBUF_FLAG_CHROMAKEY        = 0x0004
V4L2_FBUF_FLAG_LOCAL_ALPHA      = 0x0008
V4L2_FBUF_FLAG_GLOBAL_ALPHA     = 0x0010
V4L2_FBUF_FLAG_LOCAL_INV_ALPHA  = 0x0020
V4L2_FBUF_FLAG_SRC_CHROMAKEY    = 0x0040
class v4l2_clip(ctypes.Structure):
    pass
v4l2_clip._fields_ = [
    ('c', v4l2_rect),
    ('next', ctypes.POINTER(v4l2_clip)),
]

class v4l2_window(ctypes.Structure):
    _fields_ = [
        ('w', v4l2_rect),
        ('field', v4l2_field),
        ('chromakey', ctypes.c_uint32),
        ('clips', ctypes.POINTER(v4l2_clip)),
        ('clipcount', ctypes.c_uint32),
        ('bitmap', ctypes.c_void_p),
        ('global_alpha', ctypes.c_uint8),
    ]

class v4l2_captureparm(ctypes.Structure):
    _fields_ = [
        ('capability', ctypes.c_uint32),
        ('capturemode', ctypes.c_uint32),
        ('timeperframe', v4l2_fract),
        ('extendedmode', ctypes.c_uint32),
        ('readbuffers', ctypes.c_uint32),
        ('reserved', ctypes.c_uint32 * 4),
    ]

#  Flags for 'capability' and 'capturemode' fields
V4L2_MODE_HIGHQUALITY    = 0x0001    #  High quality imaging mode
V4L2_CAP_TIMEPERFRAME    = 0x1000    #  timeperframe field is supported

class v4l2_outputparm(ctypes.Structure):
    _fields_ = [
        ('capability', ctypes.c_uint32),
        ('outputmode', ctypes.c_uint32),
        ('timeperframe', v4l2_fract),
        ('extendedmode', ctypes.c_uint32),
        ('writebuffers', ctypes.c_uint32),
        ('reserved', ctypes.c_uint32 * 4),
    ]

class v4l2_cropcap(ctypes.Structure):
    _fields_ = [
        ('type', v4l2_buf_type),
        ('bounds', v4l2_rect),
        ('defrect', v4l2_rect),
        ('pixelaspect', v4l2_fract),
    ]

class v4l2_crop(ctypes.Structure):
    _fields_ = [
        ('type', ctypes.c_int),
        ('c', v4l2_rect),
    ]

class v4l2_selection(ctypes.Structure):
    _fields_ = [
        ('type', ctypes.c_uint32),
        ('target', ctypes.c_uint32),
        ('flags', ctypes.c_uint32),
        ('r', v4l2_rect),
        ('reserved', ctypes.c_uint32 * 9),
    ]

# one bit for each
V4L2_STD_PAL_B      = 0x00000001
V4L2_STD_PAL_B1     = 0x00000002
V4L2_STD_PAL_G      = 0x00000004
V4L2_STD_PAL_H      = 0x00000008
V4L2_STD_PAL_I      = 0x00000010
V4L2_STD_PAL_D      = 0x00000020
V4L2_STD_PAL_D1     = 0x00000040
V4L2_STD_PAL_K      = 0x00000080

V4L2_STD_PAL_M      = 0x00000100
V4L2_STD_PAL_N      = 0x00000200
V4L2_STD_PAL_Nc     = 0x00000400
V4L2_STD_PAL_60     = 0x00000800

V4L2_STD_NTSC_M     = 0x00001000    # BTSC
V4L2_STD_NTSC_M_JP  = 0x00002000    # EIA-J
V4L2_STD_NTSC_443   = 0x00004000
V4L2_STD_NTSC_M_KR  = 0x00008000    # FM A2

V4L2_STD_SECAM_B    = 0x00010000
V4L2_STD_SECAM_D    = 0x00020000
V4L2_STD_SECAM_G    = 0x00040000
V4L2_STD_SECAM_H    = 0x00080000
V4L2_STD_SECAM_K    = 0x00100000
V4L2_STD_SECAM_K1   = 0x00200000
V4L2_STD_SECAM_L    = 0x00400000
V4L2_STD_SECAM_LC   = 0x00800000

# ATSC/HDTV
V4L2_STD_ATSC_8_VSB = 0x01000000
V4L2_STD_ATSC_16_VSB= 0x02000000

V4L2_STD_NTSC       = V4L2_STD_NTSC_M | V4L2_STD_NTSC_M_JP | V4L2_STD_NTSC_M_KR
# Secam macros
V4L2_STD_SECAM_DK   = V4L2_STD_SECAM_D | V4L2_STD_SECAM_K | V4L2_STD_SECAM_K1
# All Secam Standards
V4L2_STD_SECAM      = (V4L2_STD_SECAM_B | V4L2_STD_SECAM_G | V4L2_STD_SECAM_H |
                            V4L2_STD_SECAM_DK | V4L2_STD_SECAM_L | V4L2_STD_SECAM_LC)
# PAL macros
V4L2_STD_PAL_BG     = V4L2_STD_PAL_B | V4L2_STD_PAL_B1 | V4L2_STD_PAL_G
V4L2_STD_PAL_DK     = V4L2_STD_PAL_D | V4L2_STD_PAL_D1 | V4L2_STD_PAL_K
V4L2_STD_PAL        = V4L2_STD_PAL_BG | V4L2_STD_PAL_DK    | V4L2_STD_PAL_H | V4L2_STD_PAL_I
# Chroma "agnostic" standards
V4L2_STD_B          = V4L2_STD_PAL_B | V4L2_STD_PAL_B1 | V4L2_STD_SECAM_B
V4L2_STD_G          = V4L2_STD_PAL_G | V4L2_STD_SECAM_G
V4L2_STD_H          = V4L2_STD_PAL_H | V4L2_STD_SECAM_H
V4L2_STD_L          = V4L2_STD_SECAM_L | V4L2_STD_SECAM_LC
V4L2_STD_GH         = V4L2_STD_G | V4L2_STD_H
V4L2_STD_DK         = V4L2_STD_PAL_DK | V4L2_STD_SECAM_DK
V4L2_STD_BG         = V4L2_STD_B | V4L2_STD_G
V4L2_STD_MN         = V4L2_STD_PAL_M | V4L2_STD_PAL_N | V4L2_STD_PAL_Nc    | V4L2_STD_NTSC
# Standards where MTS/BTSC stereo could be found
V4L2_STD_MTS        = V4L2_STD_NTSC_M | V4L2_STD_PAL_M | V4L2_STD_PAL_N    | V4L2_STD_PAL_Nc
# Standards for Countries with 60Hz Line frequency
V4L2_STD_525_60     = V4L2_STD_PAL_M | V4L2_STD_PAL_60 | V4L2_STD_NTSC | V4L2_STD_NTSC_443
# Standards for Countries with 50Hz Line frequency
V4L2_STD_625_50     = V4L2_STD_PAL | V4L2_STD_PAL_N | V4L2_STD_PAL_Nc | V4L2_STD_SECAM
V4L2_STD_ATSC       = V4L2_STD_ATSC_8_VSB | V4L2_STD_ATSC_16_VSB
# Macros with none and all analog standards
V4L2_STD_UNKNOWN    = 0
V4L2_STD_ALL        = V4L2_STD_525_60 | V4L2_STD_625_50

class v4l2_standard(ctypes.Structure):
    _fields_ = [
        ('index', ctypes.c_uint32),
        ('id', v4l2_std_id),
        ('name', ctypes.c_char * 24),
        ('frameperiod', v4l2_fract),
        ('framelines', ctypes.c_uint32),
        ('reserved', ctypes.c_uint32 * 4),
    ]

class v4l2_bt_timings(ctypes.Structure):
    _fields_ = [
        ('width', ctypes.c_uint32),
        ('height', ctypes.c_uint32),
        ('interlaced', ctypes.c_uint32),
        ('polarities', ctypes.c_uint32),
        ('pixelclock', ctypes.c_uint32),
        ('hfrontporch', ctypes.c_uint32),
        ('hsync', ctypes.c_uint32),
        ('hbackporch', ctypes.c_uint32),
        ('vfrontporch', ctypes.c_uint32),
        ('vsync', ctypes.c_uint32),
        ('vbackporch', ctypes.c_uint32),
        ('il_vfrontporch', ctypes.c_uint32),
        ('il_vsync', ctypes.c_uint32),
        ('il_vbackporch', ctypes.c_uint32),
        ('standards', ctypes.c_uint32),
        ('flags', ctypes.c_uint32),
        ('picture_aspect', v4l2_fract),
        ('cea861_vic', ctypes.c_uint8),
        ('hdmi_vic', ctypes.c_uint8),
        ('reserved', ctypes.c_uint8 * 46),
    ]
    _pack_ = True

# Interlaced or progressive format
V4L2_DV_PROGRESSIVE                 = 0
V4L2_DV_INTERLACED                  = 1

# Polarities. If bit is not set, it is assumed to be negative polarity
V4L2_DV_VSYNC_POS_POL               = 0x00000001
V4L2_DV_HSYNC_POS_POL               = 0x00000002

# Timings standards
V4L2_DV_BT_STD_CEA861               = 1 << 0  # CEA-861 Digital TV Profile
V4L2_DV_BT_STD_DMT                  = 1 << 1  # VESA Discrete Monitor Timings
V4L2_DV_BT_STD_CVT                  = 1 << 2  # VESA Coordinated Video Timings
V4L2_DV_BT_STD_GTF                  = 1 << 3  # VESA Generalized Timings Formula
V4L2_DV_BT_STD_SDI                  = 1 << 4  # SDI Timings

# Flags
V4L2_DV_FL_REDUCED_BLANKING         = 1 << 0
V4L2_DV_FL_CAN_REDUCE_FPS           = 1 << 1
V4L2_DV_FL_REDUCED_FPS              = 1 << 2
V4L2_DV_FL_HALF_LINE                = 1 << 3
V4L2_DV_FL_IS_CE_VIDEO              = 1 << 4
V4L2_DV_FL_FIRST_FIELD_EXTRA_LINE   = 1 << 5
V4L2_DV_FL_HAS_PICTURE_ASPECT       = 1 << 6
V4L2_DV_FL_HAS_CEA861_VIC           = 1 << 7
V4L2_DV_FL_HAS_HDMI_VIC             = 1 << 8

class v4l2_dv_timings(ctypes.Structure):
    class _u(ctypes.Union):
        _fields_ = [
                ('bt', v4l2_bt_timings),
                ('reserved', ctypes.c_uint32 * 32),
        ]

    _fields_ = [
        ('type', ctypes.c_uint32),
        ('_u', _u),
    ]

    _anonymous_ = ('_u',)
    _pack_ = True

# Values for the type field
V4L2_DV_BT_656_1120     = 0    # BT.656/1120 timing type


class v4l2_enum_dv_timings(ctypes.Structure):
    _fields_ = [
        ('index', ctypes.c_uint32),
        ('pad', ctypes.c_uint32),
        ('reserved', ctypes.c_uint32 * 2),
        ('timings', v4l2_dv_timings),
    ]

class v4l2_bt_timings_cap(ctypes.Structure):
    _fields_ = [
        ('min_width', ctypes.c_uint32),
        ('max_width', ctypes.c_uint32),
        ('min_height', ctypes.c_uint32),
        ('max_height', ctypes.c_uint32),
        ('min_pixelclock', ctypes.c_uint64),
        ('max_pixelclock', ctypes.c_uint64),
        ('standards', ctypes.c_uint32),
        ('capabilities', ctypes.c_uint32),
        ('reserved', ctypes.c_uint32 * 16),
    ]
    _pack_ = True

# Supports interlaced formats
V4L2_DV_BT_CAP_INTERLACED       = 1 << 0
# Supports progressive formats
V4L2_DV_BT_CAP_PROGRESSIVE      = 1 << 1
# Supports CVT/GTF reduced blanking
V4L2_DV_BT_CAP_REDUCED_BLANKING = 1 << 2
# Supports custom formats
V4L2_DV_BT_CAP_CUSTOM           = 1 << 3
class v4l2_dv_timings_cap(ctypes.Structure):
    class _u(ctypes.Union):
        _fields_ = [
            ('bt', v4l2_bt_timings_cap),
            ('raw_data', ctypes.c_uint32 * 32),
        ]
    _fields_ = [
        ('type', ctypes.c_uint32),
        ('pad', ctypes.c_uint32),
        ('reserved', ctypes.c_uint32 * 2),
        ('_u', _u),
    ]
    _anonymous_ = ('_u',)

class v4l2_input(ctypes.Structure):
    _fields_ = [
        ('index', ctypes.c_uint32),
        ('name', ctypes.c_char * 32),
        ('type', ctypes.c_uint32),
        ('audioset', ctypes.c_uint32),
        ('tuner', ctypes.c_uint32),
        ('std', v4l2_std_id),
        ('status', ctypes.c_uint32),
        ('capabilities', ctypes.c_uint32),
        ('reserved', ctypes.c_uint32 * 3),
    ]

#  Values for the 'type' field
V4L2_INPUT_TYPE_TUNER   = 1
V4L2_INPUT_TYPE_CAMERA  = 2
V4L2_INPUT_TYPE_TOUCH   = 3

# field 'status' - general
V4L2_IN_ST_NO_POWER     = 0x00000001  # Attached device is off
V4L2_IN_ST_NO_SIGNAL    = 0x00000002
V4L2_IN_ST_NO_COLOR     = 0x00000004

# field 'status' - sensor orientation
# If sensor is mounted upside down set both bits
V4L2_IN_ST_HFLIP        = 0x00000010 # Frames are flipped horizontally
V4L2_IN_ST_VFLIP        = 0x00000020 # Frames are flipped vertically

# field 'status' - analog
V4L2_IN_ST_NO_H_LOCK    = 0x00000100  # No horizontal sync lock
V4L2_IN_ST_COLOR_KILL   = 0x00000200  # Color killer is active
V4L2_IN_ST_NO_V_LOCK    = 0x00000400  # No vertical sync lock
V4L2_IN_ST_NO_STD_LOCK  = 0x00000800  # No standard format lock

# field 'status' - digital
V4L2_IN_ST_NO_SYNC      = 0x00010000  # No synchronization lock
V4L2_IN_ST_NO_EQU       = 0x00020000  # No equalizer lock
V4L2_IN_ST_NO_CARRIER   = 0x00040000  # Carrier recovery failed

# field 'status' - VCR and set-top box
V4L2_IN_ST_MACROVISION  = 0x01000000  # Macrovision detected
V4L2_IN_ST_NO_ACCESS    = 0x02000000  # Conditional access denied
V4L2_IN_ST_VTR          = 0x04000000  # VTR time constant

# capabilities flags
V4L2_IN_CAP_DV_TIMINGS      = 0x00000002 # Supports S_DV_TIMINGS
V4L2_IN_CAP_CUSTOM_TIMINGS  = V4L2_IN_CAP_DV_TIMINGS # For compatibility
V4L2_IN_CAP_STD             = 0x00000004 # Supports S_STD
V4L2_IN_CAP_NATIVE_SIZE     = 0x00000008 # Supports setting native size

class v4l2_output(ctypes.Structure):
    _fields_ = [
        ('index', ctypes.c_uint32),
        ('name', ctypes.c_char * 32),
        ('type', ctypes.c_uint32),
        ('audioset', ctypes.c_uint32),
        ('modulator', ctypes.c_uint32),
        ('std', v4l2_std_id),
        ('capabilities', ctypes.c_uint32),
        ('reserved', ctypes.c_uint32 * 3),
    ]

#  Values for the 'type' field
V4L2_OUTPUT_TYPE_MODULATOR          = 1
V4L2_OUTPUT_TYPE_ANALOG             = 2
V4L2_OUTPUT_TYPE_ANALOGVGAOVERLAY   = 3

# capabilities flags
V4L2_OUT_CAP_DV_TIMINGS             = 0x00000002 # Supports S_DV_TIMINGS
V4L2_OUT_CAP_CUSTOM_TIMINGS         = V4L2_OUT_CAP_DV_TIMINGS # For compatibility
V4L2_OUT_CAP_STD                    = 0x00000004 # Supports S_STD
V4L2_OUT_CAP_NATIVE_SIZE            = 0x00000008 # Supports setting native size

class v4l2_control(ctypes.Structure):
    _fields_ = [
        ('id', ctypes.c_uint32),
        ('value', ctypes.c_int32),
    ]

class v4l2_ext_control(ctypes.Structure):
    class _u(ctypes.Union):
        _fields_ = [
            ('value', ctypes.c_int32),
            ('value64', ctypes.c_int64),
            ('string', ctypes.c_char_p),
            ('p_u8', ctypes.c_char_p),
            ('p_u16', ctypes.POINTER(ctypes.c_uint16)),
            ('p_u32', ctypes.POINTER(ctypes.c_uint32)),
            ('ptr', ctypes.c_void_p),
        ]

    _fields_ = [
        ('id', ctypes.c_uint32),
        ('size', ctypes.c_uint32),
        ('reserved2', ctypes.c_uint32 * 1),
        ('_u', _u)
    ]

    _anonymous_ = ('_u',)
    _pack_ = True

class v4l2_ext_controls(ctypes.Structure):
    class _u(ctypes.Union):
        _fields_ = [
            ('ctrl_class', ctypes.c_uint32),
            ('which', ctypes.c_uint32),
        ]
    _fields_ = [
        ('_u', _u),
        ('count', ctypes.c_uint32),
        ('error_idx', ctypes.c_uint32),
        ('reserved', ctypes.c_uint32 * 2),
        ('controls', ctypes.POINTER(v4l2_ext_control)),
    ]
    _anonymous_ = ('_u',)

V4L2_CTRL_ID_MASK            = 0x0fffffff
def V4L2_CTRL_ID2CLASS(id):
    return id & 0x0fff0000
def V4L2_CTRL_ID2WHICH(id):
    return id & 0x0fff0000
def V4L2_CTRL_DRIVER_PRIV(id):
    return (id & 0xffff) >= 0x1000
V4L2_CTRL_MAX_DIMS      = 4
V4L2_CTRL_WHICH_CUR_VAL = 0
V4L2_CTRL_WHICH_DEF_VAL = 0x0f000000

v4l2_ctrl_type  = enum
(
    V4L2_CTRL_TYPE_INTEGER,
    V4L2_CTRL_TYPE_BOOLEAN,
    V4L2_CTRL_TYPE_MENU,
    V4L2_CTRL_TYPE_BUTTON,
    V4L2_CTRL_TYPE_INTEGER64,
    V4L2_CTRL_TYPE_CTRL_CLASS,
    V4L2_CTRL_TYPE_STRING,
    V4L2_CTRL_TYPE_BITMASK,
    V4L2_CTRL_TYPE_INTEGER_MENU,
    V4L2_CTRL_COMPOUND_TYPES,
    V4L2_CTRL_TYPE_U8,
    V4L2_CTRL_TYPE_U16,
    V4L2_CTRL_TYPE_U32,
) = list(range(1,10)) + [0x0100] + list(range(0x0100, 0x0103))

#  Used in the VIDIOC_QUERYCTRL ioctl for querying controls

class v4l2_queryctrl(ctypes.Structure):
    _fields_ = [
        ('id', ctypes.c_uint32),
        ('type', v4l2_ctrl_type),
        ('name', ctypes.c_char * 32),
        ('minimum', ctypes.c_int32),
        ('maximum', ctypes.c_int32),
        ('step', ctypes.c_int32),
        ('default_value', ctypes.c_int32),
        ('flags', ctypes.c_uint32),
        ('reserved', ctypes.c_uint32 * 2),
    ]

#  Used in the VIDIOC_QUERY_EXT_CTRL ioctl for querying extended controls
class v4l2_query_ext_ctrl(ctypes.Structure):
    _fields_ = [
        ('id', ctypes.c_uint32),
        ('type', ctypes.c_uint32),
        ('name', ctypes.c_char * 32),
        ('minimum', ctypes.c_int64),
        ('maximum', ctypes.c_int64),
        ('step', ctypes.c_uint64),
        ('default_value', ctypes.c_int64),
        ('flags', ctypes.c_uint32),
        ('elem_size', ctypes.c_uint32),
        ('elems', ctypes.c_uint32),
        ('nr_of_dims', ctypes.c_uint32),
        ('dims', ctypes.c_uint32 * V4L2_CTRL_MAX_DIMS),
        ('reserved', ctypes.c_uint32 * 32),
    ]

#  Used in the VIDIOC_QUERYMENU ioctl for querying menu items

class v4l2_querymenu(ctypes.Structure):
    class _u(ctypes.Union):
        _fields_ = [
            ('name', ctypes.c_char * 32),
            ('value', ctypes.c_uint64),
        ]
    _fields_ = [
        ('id', ctypes.c_uint32),
        ('index', ctypes.c_uint32),
        ('_u', _u),
        ('reserved', ctypes.c_uint32),
    ]
    _anonymous_ = ('_u',)
    _pack_ = True

#  Control flags 
V4L2_CTRL_FLAG_DISABLED         = 0x0001
V4L2_CTRL_FLAG_GRABBED          = 0x0002
V4L2_CTRL_FLAG_READ_ONLY        = 0x0004
V4L2_CTRL_FLAG_UPDATE           = 0x0008
V4L2_CTRL_FLAG_INACTIVE         = 0x0010
V4L2_CTRL_FLAG_SLIDER           = 0x0020
V4L2_CTRL_FLAG_WRITE_ONLY       = 0x0040
V4L2_CTRL_FLAG_VOLATILE         = 0x0080
V4L2_CTRL_FLAG_HAS_PAYLOAD      = 0x0100
V4L2_CTRL_FLAG_EXECUTE_ON_WRITE = 0x0200
V4L2_CTRL_FLAG_MODIFY_LAYOUT    = 0x0400

#  Query flags, to be ORed with the control ID
V4L2_CTRL_FLAG_NEXT_CTRL        = 0x80000000
V4L2_CTRL_FLAG_NEXT_COMPOUND    = 0x40000000

#  User-class control IDs defined by V4L2
V4L2_CID_MAX_CTRLS              = 1024
#  IDs reserved for driver specific controls
V4L2_CID_PRIVATE_BASE           = 0x08000000

class v4l2_tuner(ctypes.Structure):
    _fields_ = [
        ('index', ctypes.c_uint32),
        ('name', ctypes.c_char * 32),
        ('type', v4l2_tuner_type),
        ('capability', ctypes.c_uint32),
        ('rangelow', ctypes.c_uint32),
        ('rangehigh', ctypes.c_uint32),
        ('rxsubchans', ctypes.c_uint32),
        ('audmode', ctypes.c_uint32),
        ('signal', ctypes.c_int32),
        ('afc', ctypes.c_int32),
        ('reserved', ctypes.c_uint32 * 4),
    ]

class v4l2_modulator(ctypes.Structure):
    _fields_ = [
        ('index', ctypes.c_uint32),
        ('name', ctypes.c_char * 32),
        ('capability', ctypes.c_uint32),
        ('rangelow', ctypes.c_uint32),
        ('rangehigh', ctypes.c_uint32),
        ('txsubchans', ctypes.c_uint32),
        ('type', v4l2_tuner_type),
        ('reserved', ctypes.c_uint32 * 3),
    ]

#  Flags for the 'capability' field
V4L2_TUNER_CAP_LOW              = 0x0001
V4L2_TUNER_CAP_NORM             = 0x0002
V4L2_TUNER_CAP_HWSEEK_BOUNDED   = 0x0004
V4L2_TUNER_CAP_HWSEEK_WRAP      = 0x0008
V4L2_TUNER_CAP_STEREO           = 0x0010
V4L2_TUNER_CAP_LANG2            = 0x0020
V4L2_TUNER_CAP_SAP              = 0x0020
V4L2_TUNER_CAP_LANG1            = 0x0040
V4L2_TUNER_CAP_RDS              = 0x0080
V4L2_TUNER_CAP_RDS_BLOCK_IO     = 0x0100
V4L2_TUNER_CAP_RDS_CONTROLS     = 0x0200
V4L2_TUNER_CAP_FREQ_BANDS       = 0x0400
V4L2_TUNER_CAP_HWSEEK_PROG_LIM  = 0x0800
V4L2_TUNER_CAP_1HZ              = 0x1000

#  Flags for the 'rxsubchans' field
V4L2_TUNER_SUB_MONO             = 0x0001
V4L2_TUNER_SUB_STEREO           = 0x0002
V4L2_TUNER_SUB_LANG2            = 0x0004
V4L2_TUNER_SUB_SAP              = 0x0004
V4L2_TUNER_SUB_LANG1            = 0x0008
V4L2_TUNER_SUB_RDS              = 0x0010

#  Values for the 'audmode' field
V4L2_TUNER_MODE_MONO            = 0x0000
V4L2_TUNER_MODE_STEREO          = 0x0001
V4L2_TUNER_MODE_LANG2           = 0x0002
V4L2_TUNER_MODE_SAP             = 0x0002
V4L2_TUNER_MODE_LANG1           = 0x0003
V4L2_TUNER_MODE_LANG1_LANG2     = 0x0004

class v4l2_frequency(ctypes.Structure):
    _fields_ = [
        ('tuner', ctypes.c_uint32),
        ('type', v4l2_tuner_type),
        ('frequency', ctypes.c_uint32),
        ('reserved', ctypes.c_uint32 * 8),
    ]

V4L2_BAND_MODULATION_VSB    = 1 << 1
V4L2_BAND_MODULATION_FM     = 1 << 2
V4L2_BAND_MODULATION_AM     = 1 << 3

class v4l2_frequency_band(ctypes.Structure):
    _fields_ = [
        ('tuner', ctypes.c_uint32),
        ('type', ctypes.c_uint32),
        ('index', ctypes.c_uint32),
        ('capability', ctypes.c_uint32),
        ('rangelow', ctypes.c_uint32),
        ('rangehigh', ctypes.c_uint32),
        ('modulation', ctypes.c_uint32),
        ('reserved', ctypes.c_uint32 * 9),
    ]
class v4l2_hw_freq_seek(ctypes.Structure):
    _fields_ = [
        ('tuner', ctypes.c_uint32),
        ('type', ctypes.c_uint32),
        ('seek_upward', ctypes.c_uint32),
        ('wrap_around', ctypes.c_uint32),
        ('spacing', ctypes.c_uint32),
        ('rangelow', ctypes.c_uint32),
        ('rangehigh', ctypes.c_uint32),
        ('reserved', ctypes.c_uint32 * 5),
    ]

class v4l2_rds_data(ctypes.Structure):
    _fields_ = [
        ('lsb', ctypes.c_char),
        ('msb', ctypes.c_char),
        ('block', ctypes.c_char),
    ]
    _pack_ = True

V4L2_RDS_BLOCK_MSK      = 0x7
V4L2_RDS_BLOCK_A        = 0
V4L2_RDS_BLOCK_B        = 1
V4L2_RDS_BLOCK_C        = 2
V4L2_RDS_BLOCK_D        = 3
V4L2_RDS_BLOCK_C_ALT    = 4
V4L2_RDS_BLOCK_INVALID  = 7

V4L2_RDS_BLOCK_CORRECTED= 0x40
V4L2_RDS_BLOCK_ERROR    = 0x80

class v4l2_audio(ctypes.Structure):
    _fields_ = [
        ('index', ctypes.c_uint32),
        ('name', ctypes.c_char * 32),
        ('capability', ctypes.c_uint32),
        ('mode', ctypes.c_uint32),
        ('reserved', ctypes.c_uint32 * 2),
    ]

#  Flags for the 'capability' field
V4L2_AUDCAP_STEREO  = 0x00001
V4L2_AUDCAP_AVL     = 0x00002

#  Flags for the 'mode' field
V4L2_AUDMODE_AVL    = 0x00001

class v4l2_audioout(ctypes.Structure):
    _fields_ = [
        ('index', ctypes.c_uint32),
        ('name', ctypes.c_char * 32),
        ('capability', ctypes.c_uint32),
        ('mode', ctypes.c_uint32),
        ('reserved', ctypes.c_uint32 * 2),
    ]

V4L2_ENC_IDX_FRAME_I    = 0
V4L2_ENC_IDX_FRAME_P    = 1
V4L2_ENC_IDX_FRAME_B    = 2
V4L2_ENC_IDX_FRAME_MASK = 0xf

class v4l2_enc_idx_entry(ctypes.Structure):
    _fields_ = [
        ('offset', ctypes.c_uint64),
        ('pts', ctypes.c_uint64),
        ('length', ctypes.c_uint32),
        ('flags', ctypes.c_uint32),
        ('reserved', ctypes.c_uint32 * 2),
    ]

V4L2_ENC_IDX_ENTRIES = 64

class v4l2_enc_idx(ctypes.Structure):
    _fields_ = [
        ('entries', ctypes.c_uint32),
        ('entries_cap', ctypes.c_uint32),
        ('reserved', ctypes.c_uint32 * 4),
        ('entry', v4l2_enc_idx_entry * V4L2_ENC_IDX_ENTRIES),
    ]


V4L2_ENC_CMD_START      = 0
V4L2_ENC_CMD_STOP       = 1
V4L2_ENC_CMD_PAUSE      = 2
V4L2_ENC_CMD_RESUME     = 3

# Flags for V4L2_ENC_CMD_STOP
V4L2_ENC_CMD_STOP_AT_GOP_END    = 1 << 0

class v4l2_encoder_cmd(ctypes.Structure):
    class _u(ctypes.Union):
        class _s(ctypes.Structure):
            _fields_ = [
                ('data', ctypes.c_uint32 * 8),
            ]

        _fields_ = [
            ('raw', _s),
        ]

    _fields_ = [
        ('cmd', ctypes.c_uint32),
        ('flags', ctypes.c_uint32),
        ('_u', _u),
    ]

    _anonymous_ = ('_u',)

# Decoder commands
V4L2_DEC_CMD_START       = 0
V4L2_DEC_CMD_STOP        = 1
V4L2_DEC_CMD_PAUSE       = 2
V4L2_DEC_CMD_RESUME      = 3

# Flags for V4L2_DEC_CMD_START
V4L2_DEC_CMD_START_MUTE_AUDIO   = 1 << 0

# Flags for V4L2_DEC_CMD_PAUSE
V4L2_DEC_CMD_PAUSE_TO_BLACK     = 1 << 0

# Flags for V4L2_DEC_CMD_STOP
V4L2_DEC_CMD_STOP_TO_BLACK      = 1 << 0
V4L2_DEC_CMD_STOP_IMMEDIATELY   = 1 << 1

# Play format requirements (returned by the driver):

# The decoder has no special format requirements
V4L2_DEC_START_FMT_NONE         = 0
# The decoder requires full GOPs
V4L2_DEC_START_FMT_GOP          = 1

class v4l2_decoder_cmd(ctypes.Structure):
    class _u(ctypes.Union):
        class _s1(ctypes.Structure):
            _fields_ = [
                ('pts', ctypes.c_uint64),
            ]
        class _s2(ctypes.Structure):
            _fields_ = [
                ('speed', ctypes.c_uint32),
                ('format', ctypes.c_uint32),
            ]
        class _s3(ctypes.Structure):
            _fields_ = [
                ('data', ctypes.c_uint32),
            ]

        _fields_ = [
            ('stop', _s1),
            ('start', _s2),
            ('raw', _s3),
        ]

    _fields_ = [
        ('cmd', ctypes.c_uint32),
        ('flags', ctypes.c_uint32),
        ('_u', _u),
    ]

    _anonymous_ = ('_u',)

# Raw VBI

class v4l2_vbi_format(ctypes.Structure):
    _fields_ = [
        ('sampling_rate', ctypes.c_uint32),
        ('offset', ctypes.c_uint32),
        ('samples_per_line', ctypes.c_uint32),
        ('sample_format', ctypes.c_uint32),
        ('start', ctypes.c_int32 * 2),
        ('count', ctypes.c_uint32 * 2),
        ('flags', ctypes.c_uint32),
        ('reserved', ctypes.c_uint32 * 2),
    ]

#  VBI flags 
V4L2_VBI_UNSYNC             = 1 << 0
V4L2_VBI_INTERLACED         = 1 << 1

# ITU-R start lines for each field
V4L2_VBI_ITU_525_F1_START   = 1
V4L2_VBI_ITU_525_F2_START   = 264
V4L2_VBI_ITU_625_F1_START   = 1
V4L2_VBI_ITU_625_F2_START   = 314

# Sliced VBI

class v4l2_sliced_vbi_format(ctypes.Structure):
    _fields_ = [
        ('service_set', ctypes.c_uint16),
        ('service_lines', ctypes.c_uint16 * 2 * 24),
        ('io_size', ctypes.c_uint32),
        ('reserved', ctypes.c_uint32 * 2),
    ]

V4L2_SLICED_TELETEXT_B          = 0x0001
V4L2_SLICED_VPS                 = 0x0400
V4L2_SLICED_CAPTION_525         = 0x1000
V4L2_SLICED_WSS_625             = 0x4000

V4L2_SLICED_VBI_525             = V4L2_SLICED_CAPTION_525
V4L2_SLICED_VBI_625             = V4L2_SLICED_TELETEXT_B | V4L2_SLICED_VPS | V4L2_SLICED_WSS_625

class v4l2_sliced_vbi_cap(ctypes.Structure):
    _fields_ = [
        ('service_set', ctypes.c_uint16),
        ('service_lines', ctypes.c_uint16 * 2 * 24),
        ('type', v4l2_buf_type),
        ('reserved', ctypes.c_uint32 * 3),
    ]

class v4l2_sliced_vbi_data(ctypes.Structure):
    _fields_ = [
        ('id', ctypes.c_uint32),
        ('field', ctypes.c_uint32),
        ('line', ctypes.c_uint32),
        ('reserved', ctypes.c_uint32),
        ('data', ctypes.c_char * 48),
    ]

# Line type IDs
V4L2_MPEG_VBI_IVTV_TELETEXT_B     = 1
V4L2_MPEG_VBI_IVTV_CAPTION_525    = 4
V4L2_MPEG_VBI_IVTV_WSS_625        = 5
V4L2_MPEG_VBI_IVTV_VPS            = 7

class v4l2_mpeg_vbi_itv0_line(ctypes.Structure):
    _fields_ = [
        ('id', ctypes.c_char),
        ('data', ctypes.c_char * 42),
    ]
    _pack_ = True

class v4l2_mpeg_vbi_itv0(ctypes.Structure):
    _fields_ = [
        ('linemask', ctypes.c_uint32 * 2),
        ('line', v4l2_mpeg_vbi_itv0_line * 35),
    ]
    _pack_ = True

class v4l2_mpeg_vbi_ITV0(ctypes.Structure):
    _fields_ = [
        ('line', v4l2_mpeg_vbi_itv0_line * 36),
    ]
    _pack_ = True

V4L2_MPEG_VBI_IVTV_MAGIC0    = "itv0"
V4L2_MPEG_VBI_IVTV_MAGIC1    = "ITV0"

class v4l2_mpeg_vbi_fmt_ivtv(ctypes.Structure):
    class _u(ctypes.Union):
        _fields_ = [
                ('itv0', v4l2_mpeg_vbi_itv0),
                ('ITV0', v4l2_mpeg_vbi_ITV0),
        ]
    _fields_ = [
        ('magic', ctypes.c_char * 4),
        ('_u', _u)
    ]

    _anonymous_ = ('_u',)
    _pack_ = True

class v4l2_plane_pix_format(ctypes.Structure):
    _fields_ = [
        ('sizeimage', ctypes.c_uint32),
        ('bytesperline', ctypes.c_uint32),
        ('reserved', ctypes.c_uint16),
    ]
    _pack_ = True

class v4l2_pix_format_mplane(ctypes.Structure):
    class _u(ctypes.Union):
        _fields_ = [
                ('ycbcr_enc', ctypes.c_char),
                ('hsv_enc', ctypes.c_char),
            ]
    _fields_ = [
        ('width', ctypes.c_uint32),
        ('height', ctypes.c_uint32),
        ('pixelformat', ctypes.c_uint32),
        ('field', ctypes.c_uint32),
        ('colorspace', ctypes.c_uint32),
        ('plane_fmt', v4l2_plane_pix_format * VIDEO_MAX_PLANES),
        ('num_planes', ctypes.c_char),
        ('flags', ctypes.c_char),
        ('_u', _u),
        ('quantization', ctypes.c_char),
        ('xfer_func', ctypes.c_char),
        ('reserved', ctypes.c_char * 7),
    ]

    _anonymous_ = ('_u',)
    _pack_ = True

class v4l2_sdr_format(ctypes.Structure):
    _fields_ = [
        ('pixelformat', ctypes.c_uint32),
        ('buffersize', ctypes.c_uint32),
        ('reserved', ctypes.c_char * 24),
    ]

    _pack_ = True

class v4l2_meta_format(ctypes.Structure):
    _fields_ = [
        ('dataformat', ctypes.c_uint32),
        ('buffersize', ctypes.c_uint32),
    ]

    _pack_ = True

class v4l2_format(ctypes.Structure):
    class _u(ctypes.Union):
        _fields_ = [
            ('pix', v4l2_pix_format),
            ('pix_mp', v4l2_pix_format_mplane),
            ('win', v4l2_window),
            ('vbi', v4l2_vbi_format),
            ('sliced', v4l2_sliced_vbi_format),
            ('sdr', v4l2_sdr_format),
            ('meta', v4l2_meta_format),
            ('raw_data', ctypes.c_char * 200),
        ]

    _fields_ = [
        ('type', v4l2_buf_type),
        ('fmt', _u),
    ]

#    Stream type-dependent parameters
class v4l2_streamparm(ctypes.Structure):
    class _u(ctypes.Union):
        _fields_ = [
            ('capture', v4l2_captureparm),
            ('output', v4l2_outputparm),
            ('raw_data', ctypes.c_char * 200),
        ]

    _fields_ = [
        ('type', v4l2_buf_type),
        ('parm', _u)
    ]

V4L2_EVENT_ALL              = 0
V4L2_EVENT_VSYNC            = 1
V4L2_EVENT_EOS              = 2
V4L2_EVENT_CTRL             = 3
V4L2_EVENT_FRAME_SYNC       = 4
V4L2_EVENT_SOURCE_CHANGE    = 5
V4L2_EVENT_MOTION_DET       = 6
V4L2_EVENT_FRAME_END        = 7
V4L2_EVENT_PRIVATE_START    = 0x08000000

# Payload for V4L2_EVENT_VSYNC
class v4l2_event_vsync(ctypes.Structure):
    _fields_ = [
        ('field', ctypes.c_char),
    ]

    _pack_ = True

# Payload for V4L2_EVENT_CTRL
V4L2_EVENT_CTRL_CH_VALUE    = 1 << 0
V4L2_EVENT_CTRL_CH_FLAGS    = 1 << 1
V4L2_EVENT_CTRL_CH_RANGE    = 1 << 2

class v4l2_event_ctrl(ctypes.Structure):
    class _u(ctypes.Union):
        _fields_ = [
            ('value', ctypes.c_int32),
            ('value64', ctypes.c_int64),
        ]

    _fields_ = [
        ('changes', ctypes.c_uint32),
        ('type', ctypes.c_uint32),
        ('_u', _u),
        ('flags', ctypes.c_uint32),
        ('minimum', ctypes.c_int32),
        ('maximum', ctypes.c_int32),
        ('step', ctypes.c_int32),
        ('default_value', ctypes.c_int32),
    ]

    _anonymous_ = ('_u',)

# V4L2_EVENT_FRAME_SYNC or V4L2_EVENT_FRAME_END
class v4l2_event_frame_sync(ctypes.Structure):
    _fields_ = [
        ('frame_sequence', ctypes.c_uint32),
    ]

V4L2_EVENT_SRC_CH_RESOLUTION    = 1 << 0

class v4l2_event_src_change(ctypes.Structure):
    _fields_ = [
        ('changes', ctypes.c_uint32),
    ]

V4L2_EVENT_MD_FL_HAVE_FRAME_SEQ = 1 << 0

class v4l2_event_motion_det(ctypes.Structure):
    _fields_ = [
        ('flags', ctypes.c_uint32),
        ('frame_sequence', ctypes.c_uint32),
        ('region_mask', ctypes.c_uint32),
    ]

class v4l2_event(ctypes.Structure):
    class _u(ctypes.Union):
        _fields_ = [
            ('vsync', v4l2_event_vsync),
            ('ctrl', v4l2_event_ctrl),
            ('frame_sync', v4l2_event_frame_sync),
            ('src_change', v4l2_event_src_change),
            ('motion_det', v4l2_event_motion_det),
            ('data', ctypes.c_char * 64),
        ]

    _fields_ = [
        ('type', ctypes.c_uint32),
        ('u', _u),
        ('pending', ctypes.c_uint32),
        ('sequence', ctypes.c_uint32),
        ('timestamp', timespec),
        ('id', ctypes.c_uint32),
        ('reserved', ctypes.c_uint32 * 8),
    ]

V4L2_EVENT_SUB_FL_SEND_INITIAL      = 1 << 0
V4L2_EVENT_SUB_FL_ALLOW_FEEDBACK    = 1 << 1
class v4l2_event_subscription(ctypes.Structure):
    _fields_ = [
        ('type', ctypes.c_uint32),
        ('id', ctypes.c_uint32),
        ('flags', ctypes.c_uint32),
        ('reserved', ctypes.c_uint32 * 5),
    ]


# VIDIOC_DBG_G_REGISTER and VIDIOC_DBG_S_REGISTER
V4L2_CHIP_MATCH_BRIDGE      = 0  # Match against chip ID on the bridge (0 for the bridge)
V4L2_CHIP_MATCH_SUBDEV      = 4  # Match against subdev index

# The following four defines are no longer in use
V4L2_CHIP_MATCH_HOST        = V4L2_CHIP_MATCH_BRIDGE
V4L2_CHIP_MATCH_I2C_DRIVER  = 1  # Match against I2C driver name
V4L2_CHIP_MATCH_I2C_ADDR    = 2  # Match against I2C 7-bit address
V4L2_CHIP_MATCH_AC97        = 3  # Match against ancillary AC97 chip

class v4l2_dbg_match(ctypes.Structure):
    class _u(ctypes.Union):
        _fields_ = [
            ('addr', ctypes.c_uint32),
            ('name', ctypes.c_char * 32),
        ]

    _fields_ = [
        ('type', ctypes.c_uint32),
        ('_u', _u),
    ]

    _anonymous_ = ('_u',)
    _pack_ = True

class v4l2_dbg_register(ctypes.Structure):
    _fields_ = [
            ('match', v4l2_dbg_match),
            ('size', ctypes.c_uint32),
            ('reg', ctypes.c_uint64),
            ('val', ctypes.c_uint64),
            ]

    _pack_ = True

V4L2_CHIP_FL_READABLE = 1 << 0
V4L2_CHIP_FL_WRITABLE = 1 << 1

# VIDIOC_DBG_G_CHIP_INFO
class v4l2_dbg_chip_info(ctypes.Structure):
    _fields_ = [
            ('match', v4l2_dbg_match),
            ('name', ctypes.c_char * 32),
            ('flags', ctypes.c_uint32),
            ('reserved', ctypes.c_uint32 * 32),
    ]

    _pack_ = True

class v4l2_create_buffers(ctypes.Structure):
    _fields_ = [
            ('index', ctypes.c_uint32),
            ('count', ctypes.c_uint32),
            ('memory', ctypes.c_uint32),
            ('format', v4l2_format),
            ('reserved', ctypes.c_uint32 * 8),
    ]

VIDIOC_QUERYCAP             = ioctl._IOR('V',  0, v4l2_capability)
VIDIOC_RESERVED             = ioctl._IO('V',  1)
VIDIOC_ENUM_FMT             = ioctl._IOWR('V',  2, v4l2_fmtdesc)
VIDIOC_G_FMT                = ioctl._IOWR('V',  4, v4l2_format)
VIDIOC_S_FMT                = ioctl._IOWR('V',  5, v4l2_format)
VIDIOC_REQBUFS              = ioctl._IOWR('V',  8, v4l2_requestbuffers)
VIDIOC_QUERYBUF             = ioctl._IOWR('V',  9, v4l2_buffer)
VIDIOC_G_FBUF               = ioctl._IOR('V', 10, v4l2_framebuffer)
VIDIOC_S_FBUF               = ioctl._IOW('V', 11, v4l2_framebuffer)
VIDIOC_OVERLAY              = ioctl._IOW('V', 14, ctypes.c_int)
VIDIOC_QBUF                 = ioctl._IOWR('V', 15, v4l2_buffer)
VIDIOC_EXPBUF               = ioctl._IOWR('V', 16, v4l2_exportbuffer)
VIDIOC_DQBUF                = ioctl._IOWR('V', 17, v4l2_buffer)
VIDIOC_STREAMON             = ioctl._IOW('V', 18, ctypes.c_int)
VIDIOC_STREAMOFF            = ioctl._IOW('V', 19, ctypes.c_int)
VIDIOC_G_PARM               = ioctl._IOWR('V', 21, v4l2_streamparm)
VIDIOC_S_PARM               = ioctl._IOWR('V', 22, v4l2_streamparm)
VIDIOC_G_STD                = ioctl._IOR('V', 23, v4l2_std_id)
VIDIOC_S_STD                = ioctl._IOW('V', 24, v4l2_std_id)
VIDIOC_ENUMSTD              = ioctl._IOWR('V', 25, v4l2_standard)
VIDIOC_ENUMINPUT            = ioctl._IOWR('V', 26, v4l2_input)
VIDIOC_G_CTRL               = ioctl._IOWR('V', 27, v4l2_control)
VIDIOC_S_CTRL               = ioctl._IOWR('V', 28, v4l2_control)
VIDIOC_G_TUNER              = ioctl._IOWR('V', 29, v4l2_tuner)
VIDIOC_S_TUNER              = ioctl._IOW('V', 30, v4l2_tuner)
VIDIOC_G_AUDIO              = ioctl._IOR('V', 33, v4l2_audio)
VIDIOC_S_AUDIO              = ioctl._IOW('V', 34, v4l2_audio)
VIDIOC_QUERYCTRL            = ioctl._IOWR('V', 36, v4l2_queryctrl)
VIDIOC_QUERYMENU            = ioctl._IOWR('V', 37, v4l2_querymenu)
VIDIOC_G_INPUT              = ioctl._IOR('V', 38, ctypes.c_int)
VIDIOC_S_INPUT              = ioctl._IOWR('V', 39, ctypes.c_int)
VIDIOC_G_EDID               = ioctl._IOWR('V', 40, v4l2_edid)
VIDIOC_S_EDID               = ioctl._IOWR('V', 41, v4l2_edid)
VIDIOC_G_OUTPUT             = ioctl._IOR('V', 46, ctypes.c_int)
VIDIOC_S_OUTPUT             = ioctl._IOWR('V', 47, ctypes.c_int)
VIDIOC_ENUMOUTPUT           = ioctl._IOWR('V', 48, v4l2_output)
VIDIOC_G_AUDOUT             = ioctl._IOR('V', 49, v4l2_audioout)
VIDIOC_S_AUDOUT             = ioctl._IOW('V', 50, v4l2_audioout)
VIDIOC_G_MODULATOR          = ioctl._IOWR('V', 54, v4l2_modulator)
VIDIOC_S_MODULATOR          = ioctl._IOW('V', 55, v4l2_modulator)
VIDIOC_G_FREQUENCY          = ioctl._IOWR('V', 56, v4l2_frequency)
VIDIOC_S_FREQUENCY          = ioctl._IOW('V', 57, v4l2_frequency)
VIDIOC_CROPCAP              = ioctl._IOWR('V', 58, v4l2_cropcap)
VIDIOC_G_CROP               = ioctl._IOWR('V', 59, v4l2_crop)
VIDIOC_S_CROP               = ioctl._IOW('V', 60, v4l2_crop)
VIDIOC_G_JPEGCOMP           = ioctl._IOR('V', 61, v4l2_jpegcompression)
VIDIOC_S_JPEGCOMP           = ioctl._IOW('V', 62, v4l2_jpegcompression)
VIDIOC_QUERYSTD             = ioctl._IOR('V', 63, v4l2_std_id)
VIDIOC_TRY_FMT              = ioctl._IOWR('V', 64, v4l2_format)
VIDIOC_ENUMAUDIO            = ioctl._IOWR('V', 65, v4l2_audio)
VIDIOC_ENUMAUDOUT           = ioctl._IOWR('V', 66, v4l2_audioout)
VIDIOC_G_PRIORITY           = ioctl._IOR('V', 67, v4l2_priority) # enum v4l2_priority
VIDIOC_S_PRIORITY           = ioctl._IOW('V', 68, v4l2_priority) # enum v4l2_priority
VIDIOC_G_SLICED_VBI_CAP     = ioctl._IOWR('V', 69, v4l2_sliced_vbi_cap)
VIDIOC_LOG_STATUS           = ioctl._IO('V', 70)
VIDIOC_G_EXT_CTRLS          = ioctl._IOWR('V', 71, v4l2_ext_controls)
VIDIOC_S_EXT_CTRLS          = ioctl._IOWR('V', 72, v4l2_ext_controls)
VIDIOC_TRY_EXT_CTRLS        = ioctl._IOWR('V', 73, v4l2_ext_controls)
VIDIOC_ENUM_FRAMESIZES      = ioctl._IOWR('V', 74, v4l2_frmsizeenum)
VIDIOC_ENUM_FRAMEINTERVALS  = ioctl._IOWR('V', 75, v4l2_frmivalenum)
VIDIOC_G_ENC_INDEX          = ioctl._IOR('V', 76, v4l2_enc_idx)
VIDIOC_ENCODER_CMD          = ioctl._IOWR('V', 77, v4l2_encoder_cmd)
VIDIOC_TRY_ENCODER_CMD      = ioctl._IOWR('V', 78, v4l2_encoder_cmd)
VIDIOC_DBG_S_REGISTER       = ioctl._IOW('V', 79, v4l2_dbg_register)
VIDIOC_DBG_G_REGISTER       = ioctl._IOWR('V', 80, v4l2_dbg_register)
VIDIOC_S_HW_FREQ_SEEK       = ioctl._IOW('V', 82, v4l2_hw_freq_seek)
VIDIOC_S_DV_TIMINGS         = ioctl._IOWR('V', 87, v4l2_dv_timings)
VIDIOC_G_DV_TIMINGS         = ioctl._IOWR('V', 88, v4l2_dv_timings)
VIDIOC_DQEVENT              = ioctl._IOR('V', 89, v4l2_event)
VIDIOC_SUBSCRIBE_EVENT      = ioctl._IOW('V', 90, v4l2_event_subscription)
VIDIOC_UNSUBSCRIBE_EVENT    = ioctl._IOW('V', 91, v4l2_event_subscription)
VIDIOC_CREATE_BUFS          = ioctl._IOWR('V', 92, v4l2_create_buffers)
VIDIOC_PREPARE_BUF          = ioctl._IOWR('V', 93, v4l2_buffer)
VIDIOC_G_SELECTION          = ioctl._IOWR('V', 94, v4l2_selection)
VIDIOC_S_SELECTION          = ioctl._IOWR('V', 95, v4l2_selection)
VIDIOC_DECODER_CMD          = ioctl._IOWR('V', 96, v4l2_decoder_cmd)
VIDIOC_TRY_DECODER_CMD      = ioctl._IOWR('V', 97, v4l2_decoder_cmd)
VIDIOC_ENUM_DV_TIMINGS      = ioctl._IOWR('V', 98, v4l2_enum_dv_timings)
VIDIOC_QUERY_DV_TIMINGS     = ioctl._IOR('V', 99, v4l2_dv_timings)
VIDIOC_DV_TIMINGS_CAP       = ioctl._IOWR('V', 100, v4l2_dv_timings_cap)
VIDIOC_ENUM_FREQ_BANDS      = ioctl._IOWR('V', 101, v4l2_frequency_band)
VIDIOC_DBG_G_CHIP_INFO      = ioctl._IOWR('V', 102, v4l2_dbg_chip_info)
VIDIOC_QUERY_EXT_CTRL       = ioctl._IOWR('V', 103, v4l2_query_ext_ctrl)

BASE_VIDIOC_PRIVATE         = 192        # 192-255 are private

# Dict video contrl
vic = {
'V4L2_CID_BASE':V4L2_CID_BASE,
'V4L2_CID_USER_BASE':V4L2_CID_USER_BASE,
'V4L2_CID_USER_CLASS':V4L2_CID_USER_CLASS,
'V4L2_CID_BRIGHTNESS':V4L2_CID_BRIGHTNESS,
'V4L2_CID_CONTRAST':V4L2_CID_CONTRAST,
'V4L2_CID_SATURATION':V4L2_CID_SATURATION,
'V4L2_CID_HUE':V4L2_CID_HUE,
'V4L2_CID_AUDIO_VOLUME':V4L2_CID_AUDIO_VOLUME,
'V4L2_CID_AUDIO_BALANCE':V4L2_CID_AUDIO_BALANCE,
'V4L2_CID_AUDIO_BASS':V4L2_CID_AUDIO_BASS,
'V4L2_CID_AUDIO_TREBLE':V4L2_CID_AUDIO_TREBLE,
'V4L2_CID_AUDIO_MUTE':V4L2_CID_AUDIO_MUTE,
'V4L2_CID_AUDIO_LOUDNESS':V4L2_CID_AUDIO_LOUDNESS,
'V4L2_CID_BLACK_LEVEL':V4L2_CID_BLACK_LEVEL,
'V4L2_CID_AUTO_WHITE_BALANCE':V4L2_CID_AUTO_WHITE_BALANCE,
'V4L2_CID_DO_WHITE_BALANCE':V4L2_CID_DO_WHITE_BALANCE,
'V4L2_CID_RED_BALANCE':V4L2_CID_RED_BALANCE,
'V4L2_CID_BLUE_BALANCE':V4L2_CID_BLUE_BALANCE,
'V4L2_CID_GAMMA':V4L2_CID_GAMMA,
'V4L2_CID_WHITENESS':V4L2_CID_WHITENESS,
'V4L2_CID_EXPOSURE':V4L2_CID_EXPOSURE,
'V4L2_CID_AUTOGAIN':V4L2_CID_AUTOGAIN,
'V4L2_CID_GAIN':V4L2_CID_GAIN,
'V4L2_CID_HFLIP':V4L2_CID_HFLIP,
'V4L2_CID_VFLIP':V4L2_CID_VFLIP,
'V4L2_CID_POWER_LINE_FREQUENCY':V4L2_CID_POWER_LINE_FREQUENCY,
'V4L2_CID_HUE_AUTO':V4L2_CID_HUE_AUTO,
'V4L2_CID_WHITE_BALANCE_TEMPERATURE':V4L2_CID_WHITE_BALANCE_TEMPERATURE,
'V4L2_CID_SHARPNESS':V4L2_CID_SHARPNESS,
'V4L2_CID_BACKLIGHT_COMPENSATION':V4L2_CID_BACKLIGHT_COMPENSATION,
'V4L2_CID_CHROMA_AGC':V4L2_CID_CHROMA_AGC,
'V4L2_CID_COLOR_KILLER':V4L2_CID_COLOR_KILLER,
'V4L2_CID_COLORFX':V4L2_CID_COLORFX,
'V4L2_CID_AUTOBRIGHTNESS':V4L2_CID_AUTOBRIGHTNESS,
'V4L2_CID_BAND_STOP_FILTER':V4L2_CID_BAND_STOP_FILTER,
'V4L2_CID_ROTATE':V4L2_CID_ROTATE,
'V4L2_CID_BG_COLOR':V4L2_CID_BG_COLOR,
'V4L2_CID_CHROMA_GAIN':V4L2_CID_CHROMA_GAIN,
'V4L2_CID_ILLUMINATORS_1':V4L2_CID_ILLUMINATORS_1,
'V4L2_CID_ILLUMINATORS_2':V4L2_CID_ILLUMINATORS_2,
'V4L2_CID_MIN_BUFFERS_FOR_CAPTURE':V4L2_CID_MIN_BUFFERS_FOR_CAPTURE,
'V4L2_CID_MIN_BUFFERS_FOR_OUTPUT':V4L2_CID_MIN_BUFFERS_FOR_OUTPUT,
'V4L2_CID_ALPHA_COMPONENT':V4L2_CID_ALPHA_COMPONENT,
'V4L2_CID_COLORFX_CBCR':V4L2_CID_COLORFX_CBCR,
'V4L2_CID_LASTP1':V4L2_CID_LASTP1,
'V4L2_CID_USER_MEYE_BASE':V4L2_CID_USER_MEYE_BASE,
'V4L2_CID_USER_BTTV_BASE':V4L2_CID_USER_BTTV_BASE,
'V4L2_CID_USER_S2255_BASE':V4L2_CID_USER_S2255_BASE,
'V4L2_CID_USER_SI476X_BASE':V4L2_CID_USER_SI476X_BASE,
'V4L2_CID_USER_TI_VPE_BASE':V4L2_CID_USER_TI_VPE_BASE,
'V4L2_CID_USER_SAA7134_BASE':V4L2_CID_USER_SAA7134_BASE,
'V4L2_CID_USER_ADV7180_BASE':V4L2_CID_USER_ADV7180_BASE,
'V4L2_CID_USER_TC358743_BASE':V4L2_CID_USER_TC358743_BASE,
'V4L2_CID_USER_MAX217X_BASE':V4L2_CID_USER_MAX217X_BASE,
'V4L2_CID_USER_IMX_BASE':V4L2_CID_USER_IMX_BASE,
'V4L2_CID_MPEG_BASE':V4L2_CID_MPEG_BASE,
'V4L2_CID_MPEG_CLASS':V4L2_CID_MPEG_CLASS,
'V4L2_CID_MPEG_STREAM_TYPE':V4L2_CID_MPEG_STREAM_TYPE,
'V4L2_CID_MPEG_STREAM_PID_PMT':V4L2_CID_MPEG_STREAM_PID_PMT,
'V4L2_CID_MPEG_STREAM_PID_AUDIO':V4L2_CID_MPEG_STREAM_PID_AUDIO,
'V4L2_CID_MPEG_STREAM_PID_VIDEO':V4L2_CID_MPEG_STREAM_PID_VIDEO,
'V4L2_CID_MPEG_STREAM_PID_PCR':V4L2_CID_MPEG_STREAM_PID_PCR,
'V4L2_CID_MPEG_STREAM_PES_ID_AUDIO':V4L2_CID_MPEG_STREAM_PES_ID_AUDIO,
'V4L2_CID_MPEG_STREAM_PES_ID_VIDEO':V4L2_CID_MPEG_STREAM_PES_ID_VIDEO,
'V4L2_CID_MPEG_STREAM_VBI_FMT':V4L2_CID_MPEG_STREAM_VBI_FMT,
'V4L2_CID_MPEG_AUDIO_SAMPLING_FREQ':V4L2_CID_MPEG_AUDIO_SAMPLING_FREQ,
'V4L2_CID_MPEG_AUDIO_ENCODING':V4L2_CID_MPEG_AUDIO_ENCODING,
'V4L2_CID_MPEG_AUDIO_L1_BITRATE':V4L2_CID_MPEG_AUDIO_L1_BITRATE,
'V4L2_CID_MPEG_AUDIO_L2_BITRATE':V4L2_CID_MPEG_AUDIO_L2_BITRATE,
'V4L2_CID_MPEG_AUDIO_L3_BITRATE':V4L2_CID_MPEG_AUDIO_L3_BITRATE,
'V4L2_CID_MPEG_AUDIO_MODE':V4L2_CID_MPEG_AUDIO_MODE,
'V4L2_CID_MPEG_AUDIO_MODE_EXTENSION':V4L2_CID_MPEG_AUDIO_MODE_EXTENSION,
'V4L2_CID_MPEG_AUDIO_EMPHASIS':V4L2_CID_MPEG_AUDIO_EMPHASIS,
'V4L2_CID_MPEG_AUDIO_CRC':V4L2_CID_MPEG_AUDIO_CRC,
'V4L2_CID_MPEG_AUDIO_MUTE':V4L2_CID_MPEG_AUDIO_MUTE,
'V4L2_CID_MPEG_AUDIO_AAC_BITRATE':V4L2_CID_MPEG_AUDIO_AAC_BITRATE,
'V4L2_CID_MPEG_AUDIO_AC3_BITRATE':V4L2_CID_MPEG_AUDIO_AC3_BITRATE,
'V4L2_CID_MPEG_AUDIO_DEC_PLAYBACK':V4L2_CID_MPEG_AUDIO_DEC_PLAYBACK,
'V4L2_CID_MPEG_AUDIO_DEC_MULTILINGUAL_PLAYBACK':V4L2_CID_MPEG_AUDIO_DEC_MULTILINGUAL_PLAYBACK,
'V4L2_CID_MPEG_VIDEO_ENCODING':V4L2_CID_MPEG_VIDEO_ENCODING,
'V4L2_CID_MPEG_VIDEO_ASPECT':V4L2_CID_MPEG_VIDEO_ASPECT,
'V4L2_CID_MPEG_VIDEO_B_FRAMES':V4L2_CID_MPEG_VIDEO_B_FRAMES,
'V4L2_CID_MPEG_VIDEO_GOP_SIZE':V4L2_CID_MPEG_VIDEO_GOP_SIZE,
'V4L2_CID_MPEG_VIDEO_GOP_CLOSURE':V4L2_CID_MPEG_VIDEO_GOP_CLOSURE,
'V4L2_CID_MPEG_VIDEO_PULLDOWN':V4L2_CID_MPEG_VIDEO_PULLDOWN,
'V4L2_CID_MPEG_VIDEO_BITRATE_MODE':V4L2_CID_MPEG_VIDEO_BITRATE_MODE,
'V4L2_CID_MPEG_VIDEO_BITRATE':V4L2_CID_MPEG_VIDEO_BITRATE,
'V4L2_CID_MPEG_VIDEO_BITRATE_PEAK':V4L2_CID_MPEG_VIDEO_BITRATE_PEAK,
'V4L2_CID_MPEG_VIDEO_TEMPORAL_DECIMATION':V4L2_CID_MPEG_VIDEO_TEMPORAL_DECIMATION,
'V4L2_CID_MPEG_VIDEO_MUTE':V4L2_CID_MPEG_VIDEO_MUTE,
'V4L2_CID_MPEG_VIDEO_MUTE_YUV':V4L2_CID_MPEG_VIDEO_MUTE_YUV,
'V4L2_CID_MPEG_VIDEO_DECODER_SLICE_INTERFACE':V4L2_CID_MPEG_VIDEO_DECODER_SLICE_INTERFACE,
'V4L2_CID_MPEG_VIDEO_DECODER_MPEG4_DEBLOCK_FILTER':V4L2_CID_MPEG_VIDEO_DECODER_MPEG4_DEBLOCK_FILTER,
'V4L2_CID_MPEG_VIDEO_CYCLIC_INTRA_REFRESH_MB':V4L2_CID_MPEG_VIDEO_CYCLIC_INTRA_REFRESH_MB,
'V4L2_CID_MPEG_VIDEO_FRAME_RC_ENABLE':V4L2_CID_MPEG_VIDEO_FRAME_RC_ENABLE,
'V4L2_CID_MPEG_VIDEO_HEADER_MODE':V4L2_CID_MPEG_VIDEO_HEADER_MODE,
'V4L2_CID_MPEG_VIDEO_MAX_REF_PIC':V4L2_CID_MPEG_VIDEO_MAX_REF_PIC,
'V4L2_CID_MPEG_VIDEO_MB_RC_ENABLE':V4L2_CID_MPEG_VIDEO_MB_RC_ENABLE,
'V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MAX_BYTES':V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MAX_BYTES,
'V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MAX_MB':V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MAX_MB,
'V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MODE':V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MODE,
'V4L2_CID_MPEG_VIDEO_VBV_SIZE':V4L2_CID_MPEG_VIDEO_VBV_SIZE,
'V4L2_CID_MPEG_VIDEO_DEC_PTS':V4L2_CID_MPEG_VIDEO_DEC_PTS,
'V4L2_CID_MPEG_VIDEO_DEC_FRAME':V4L2_CID_MPEG_VIDEO_DEC_FRAME,
'V4L2_CID_MPEG_VIDEO_VBV_DELAY':V4L2_CID_MPEG_VIDEO_VBV_DELAY,
'V4L2_CID_MPEG_VIDEO_REPEAT_SEQ_HEADER':V4L2_CID_MPEG_VIDEO_REPEAT_SEQ_HEADER,
'V4L2_CID_MPEG_VIDEO_MV_H_SEARCH_RANGE':V4L2_CID_MPEG_VIDEO_MV_H_SEARCH_RANGE,
'V4L2_CID_MPEG_VIDEO_MV_V_SEARCH_RANGE':V4L2_CID_MPEG_VIDEO_MV_V_SEARCH_RANGE,
'V4L2_CID_MPEG_VIDEO_FORCE_KEY_FRAME':V4L2_CID_MPEG_VIDEO_FORCE_KEY_FRAME,
'V4L2_CID_MPEG_VIDEO_H263_I_FRAME_QP':V4L2_CID_MPEG_VIDEO_H263_I_FRAME_QP,
'V4L2_CID_MPEG_VIDEO_H263_P_FRAME_QP':V4L2_CID_MPEG_VIDEO_H263_P_FRAME_QP,
'V4L2_CID_MPEG_VIDEO_H263_B_FRAME_QP':V4L2_CID_MPEG_VIDEO_H263_B_FRAME_QP,
'V4L2_CID_MPEG_VIDEO_H263_MIN_QP':V4L2_CID_MPEG_VIDEO_H263_MIN_QP,
'V4L2_CID_MPEG_VIDEO_H263_MAX_QP':V4L2_CID_MPEG_VIDEO_H263_MAX_QP,
'V4L2_CID_MPEG_VIDEO_H264_I_FRAME_QP':V4L2_CID_MPEG_VIDEO_H264_I_FRAME_QP,
'V4L2_CID_MPEG_VIDEO_H264_P_FRAME_QP':V4L2_CID_MPEG_VIDEO_H264_P_FRAME_QP,
'V4L2_CID_MPEG_VIDEO_H264_B_FRAME_QP':V4L2_CID_MPEG_VIDEO_H264_B_FRAME_QP,
'V4L2_CID_MPEG_VIDEO_H264_MIN_QP':V4L2_CID_MPEG_VIDEO_H264_MIN_QP,
'V4L2_CID_MPEG_VIDEO_H264_MAX_QP':V4L2_CID_MPEG_VIDEO_H264_MAX_QP,
'V4L2_CID_MPEG_VIDEO_H264_8X8_TRANSFORM':V4L2_CID_MPEG_VIDEO_H264_8X8_TRANSFORM,
'V4L2_CID_MPEG_VIDEO_H264_CPB_SIZE':V4L2_CID_MPEG_VIDEO_H264_CPB_SIZE,
'V4L2_CID_MPEG_VIDEO_H264_ENTROPY_MODE':V4L2_CID_MPEG_VIDEO_H264_ENTROPY_MODE,
'V4L2_CID_MPEG_VIDEO_H264_I_PERIOD':V4L2_CID_MPEG_VIDEO_H264_I_PERIOD,
'V4L2_CID_MPEG_VIDEO_H264_LEVEL':V4L2_CID_MPEG_VIDEO_H264_LEVEL,
'V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_ALPHA':V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_ALPHA,
'V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_BETA':V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_BETA,
'V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_MODE':V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_MODE,
'V4L2_CID_MPEG_VIDEO_H264_PROFILE':V4L2_CID_MPEG_VIDEO_H264_PROFILE,
'V4L2_CID_MPEG_VIDEO_H264_VUI_EXT_SAR_HEIGHT':V4L2_CID_MPEG_VIDEO_H264_VUI_EXT_SAR_HEIGHT,
'V4L2_CID_MPEG_VIDEO_H264_VUI_EXT_SAR_WIDTH':V4L2_CID_MPEG_VIDEO_H264_VUI_EXT_SAR_WIDTH,
'V4L2_CID_MPEG_VIDEO_H264_VUI_SAR_ENABLE':V4L2_CID_MPEG_VIDEO_H264_VUI_SAR_ENABLE,
'V4L2_CID_MPEG_VIDEO_H264_VUI_SAR_IDC':V4L2_CID_MPEG_VIDEO_H264_VUI_SAR_IDC,
'V4L2_CID_MPEG_VIDEO_H264_SEI_FRAME_PACKING':V4L2_CID_MPEG_VIDEO_H264_SEI_FRAME_PACKING,
'V4L2_CID_MPEG_VIDEO_H264_SEI_FP_CURRENT_FRAME_0':V4L2_CID_MPEG_VIDEO_H264_SEI_FP_CURRENT_FRAME_0,
'V4L2_CID_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE':V4L2_CID_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE,
'V4L2_CID_MPEG_VIDEO_H264_FMO':V4L2_CID_MPEG_VIDEO_H264_FMO,
'V4L2_CID_MPEG_VIDEO_H264_FMO_MAP_TYPE':V4L2_CID_MPEG_VIDEO_H264_FMO_MAP_TYPE,
'V4L2_CID_MPEG_VIDEO_H264_FMO_SLICE_GROUP':V4L2_CID_MPEG_VIDEO_H264_FMO_SLICE_GROUP,
'V4L2_CID_MPEG_VIDEO_H264_FMO_CHANGE_DIRECTION':V4L2_CID_MPEG_VIDEO_H264_FMO_CHANGE_DIRECTION,
'V4L2_CID_MPEG_VIDEO_H264_FMO_CHANGE_RATE':V4L2_CID_MPEG_VIDEO_H264_FMO_CHANGE_RATE,
'V4L2_CID_MPEG_VIDEO_H264_FMO_RUN_LENGTH':V4L2_CID_MPEG_VIDEO_H264_FMO_RUN_LENGTH,
'V4L2_CID_MPEG_VIDEO_H264_ASO':V4L2_CID_MPEG_VIDEO_H264_ASO,
'V4L2_CID_MPEG_VIDEO_H264_ASO_SLICE_ORDER':V4L2_CID_MPEG_VIDEO_H264_ASO_SLICE_ORDER,
'V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING':V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING,
'V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_TYPE':V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_TYPE,
'V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_LAYER':V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_LAYER,
'V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_LAYER_QP':V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_LAYER_QP,
'V4L2_CID_MPEG_VIDEO_MPEG4_I_FRAME_QP':V4L2_CID_MPEG_VIDEO_MPEG4_I_FRAME_QP,
'V4L2_CID_MPEG_VIDEO_MPEG4_P_FRAME_QP':V4L2_CID_MPEG_VIDEO_MPEG4_P_FRAME_QP,
'V4L2_CID_MPEG_VIDEO_MPEG4_B_FRAME_QP':V4L2_CID_MPEG_VIDEO_MPEG4_B_FRAME_QP,
'V4L2_CID_MPEG_VIDEO_MPEG4_MIN_QP':V4L2_CID_MPEG_VIDEO_MPEG4_MIN_QP,
'V4L2_CID_MPEG_VIDEO_MPEG4_MAX_QP':V4L2_CID_MPEG_VIDEO_MPEG4_MAX_QP,
'V4L2_CID_MPEG_VIDEO_MPEG4_LEVEL':V4L2_CID_MPEG_VIDEO_MPEG4_LEVEL,
'V4L2_CID_MPEG_VIDEO_MPEG4_PROFILE':V4L2_CID_MPEG_VIDEO_MPEG4_PROFILE,
'V4L2_CID_MPEG_VIDEO_MPEG4_QPEL':V4L2_CID_MPEG_VIDEO_MPEG4_QPEL,
'V4L2_CID_MPEG_VIDEO_VPX_NUM_PARTITIONS':V4L2_CID_MPEG_VIDEO_VPX_NUM_PARTITIONS,
'V4L2_CID_MPEG_VIDEO_VPX_IMD_DISABLE_4X4':V4L2_CID_MPEG_VIDEO_VPX_IMD_DISABLE_4X4,
'V4L2_CID_MPEG_VIDEO_VPX_NUM_REF_FRAMES':V4L2_CID_MPEG_VIDEO_VPX_NUM_REF_FRAMES,
'V4L2_CID_MPEG_VIDEO_VPX_FILTER_LEVEL':V4L2_CID_MPEG_VIDEO_VPX_FILTER_LEVEL,
'V4L2_CID_MPEG_VIDEO_VPX_FILTER_SHARPNESS':V4L2_CID_MPEG_VIDEO_VPX_FILTER_SHARPNESS,
'V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_REF_PERIOD':V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_REF_PERIOD,
'V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_SEL':V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_SEL,
'V4L2_CID_MPEG_VIDEO_VPX_MIN_QP':V4L2_CID_MPEG_VIDEO_VPX_MIN_QP,
'V4L2_CID_MPEG_VIDEO_VPX_MAX_QP':V4L2_CID_MPEG_VIDEO_VPX_MAX_QP,
'V4L2_CID_MPEG_VIDEO_VPX_I_FRAME_QP':V4L2_CID_MPEG_VIDEO_VPX_I_FRAME_QP,
'V4L2_CID_MPEG_VIDEO_VPX_P_FRAME_QP':V4L2_CID_MPEG_VIDEO_VPX_P_FRAME_QP,
'V4L2_CID_MPEG_VIDEO_VPX_PROFILE':V4L2_CID_MPEG_VIDEO_VPX_PROFILE,
'V4L2_CID_MPEG_CX2341X_BASE':V4L2_CID_MPEG_CX2341X_BASE,
'V4L2_CID_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE':V4L2_CID_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE,
'V4L2_CID_MPEG_CX2341X_VIDEO_SPATIAL_FILTER':V4L2_CID_MPEG_CX2341X_VIDEO_SPATIAL_FILTER,
'V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE':V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE,
'V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE':V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE,
'V4L2_CID_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE':V4L2_CID_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE,
'V4L2_CID_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER':V4L2_CID_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER,
'V4L2_CID_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE':V4L2_CID_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE,
'V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_MEDIAN_FILTER_BOTTOM':V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_MEDIAN_FILTER_BOTTOM,
'V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_MEDIAN_FILTER_TOP':V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_MEDIAN_FILTER_TOP,
'V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_MEDIAN_FILTER_BOTTOM':V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_MEDIAN_FILTER_BOTTOM,
'V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_MEDIAN_FILTER_TOP':V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_MEDIAN_FILTER_TOP,
'V4L2_CID_MPEG_CX2341X_STREAM_INSERT_NAV_PACKETS':V4L2_CID_MPEG_CX2341X_STREAM_INSERT_NAV_PACKETS,
'V4L2_CID_MPEG_MFC51_BASE':V4L2_CID_MPEG_MFC51_BASE,
'V4L2_CID_MPEG_MFC51_VIDEO_DECODER_H264_DISPLAY_DELAY':V4L2_CID_MPEG_MFC51_VIDEO_DECODER_H264_DISPLAY_DELAY,
'V4L2_CID_MPEG_MFC51_VIDEO_DECODER_H264_DISPLAY_DELAY_ENABLE':V4L2_CID_MPEG_MFC51_VIDEO_DECODER_H264_DISPLAY_DELAY_ENABLE,
'V4L2_CID_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE':V4L2_CID_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE,
'V4L2_CID_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE':V4L2_CID_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE,
'V4L2_CID_MPEG_MFC51_VIDEO_PADDING':V4L2_CID_MPEG_MFC51_VIDEO_PADDING,
'V4L2_CID_MPEG_MFC51_VIDEO_PADDING_YUV':V4L2_CID_MPEG_MFC51_VIDEO_PADDING_YUV,
'V4L2_CID_MPEG_MFC51_VIDEO_RC_FIXED_TARGET_BIT':V4L2_CID_MPEG_MFC51_VIDEO_RC_FIXED_TARGET_BIT,
'V4L2_CID_MPEG_MFC51_VIDEO_RC_REACTION_COEFF':V4L2_CID_MPEG_MFC51_VIDEO_RC_REACTION_COEFF,
'V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_ACTIVITY':V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_ACTIVITY,
'V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_DARK':V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_DARK,
'V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_SMOOTH':V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_SMOOTH,
'V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_STATIC':V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_STATIC,
'V4L2_CID_MPEG_MFC51_VIDEO_H264_NUM_REF_PIC_FOR_P':V4L2_CID_MPEG_MFC51_VIDEO_H264_NUM_REF_PIC_FOR_P,
'V4L2_CID_CAMERA_CLASS_BASE':V4L2_CID_CAMERA_CLASS_BASE,
'V4L2_CID_CAMERA_CLASS':V4L2_CID_CAMERA_CLASS,
'V4L2_CID_EXPOSURE_AUTO':V4L2_CID_EXPOSURE_AUTO,
'V4L2_CID_EXPOSURE_ABSOLUTE':V4L2_CID_EXPOSURE_ABSOLUTE,
'V4L2_CID_EXPOSURE_AUTO_PRIORITY':V4L2_CID_EXPOSURE_AUTO_PRIORITY,
'V4L2_CID_PAN_RELATIVE':V4L2_CID_PAN_RELATIVE,
'V4L2_CID_TILT_RELATIVE':V4L2_CID_TILT_RELATIVE,
'V4L2_CID_PAN_RESET':V4L2_CID_PAN_RESET,
'V4L2_CID_TILT_RESET':V4L2_CID_TILT_RESET,
'V4L2_CID_PAN_ABSOLUTE':V4L2_CID_PAN_ABSOLUTE,
'V4L2_CID_TILT_ABSOLUTE':V4L2_CID_TILT_ABSOLUTE,
'V4L2_CID_FOCUS_ABSOLUTE':V4L2_CID_FOCUS_ABSOLUTE,
'V4L2_CID_FOCUS_RELATIVE':V4L2_CID_FOCUS_RELATIVE,
'V4L2_CID_FOCUS_AUTO':V4L2_CID_FOCUS_AUTO,
'V4L2_CID_ZOOM_ABSOLUTE':V4L2_CID_ZOOM_ABSOLUTE,
'V4L2_CID_ZOOM_RELATIVE':V4L2_CID_ZOOM_RELATIVE,
'V4L2_CID_ZOOM_CONTINUOUS':V4L2_CID_ZOOM_CONTINUOUS,
'V4L2_CID_PRIVACY':V4L2_CID_PRIVACY,
'V4L2_CID_IRIS_ABSOLUTE':V4L2_CID_IRIS_ABSOLUTE,
'V4L2_CID_IRIS_RELATIVE':V4L2_CID_IRIS_RELATIVE,
'V4L2_CID_AUTO_EXPOSURE_BIAS':V4L2_CID_AUTO_EXPOSURE_BIAS,
'V4L2_CID_AUTO_N_PRESET_WHITE_BALANCE':V4L2_CID_AUTO_N_PRESET_WHITE_BALANCE,
'V4L2_CID_WIDE_DYNAMIC_RANGE':V4L2_CID_WIDE_DYNAMIC_RANGE,
'V4L2_CID_IMAGE_STABILIZATION':V4L2_CID_IMAGE_STABILIZATION,
'V4L2_CID_ISO_SENSITIVITY':V4L2_CID_ISO_SENSITIVITY,
'V4L2_CID_ISO_SENSITIVITY_AUTO':V4L2_CID_ISO_SENSITIVITY_AUTO,
'V4L2_CID_EXPOSURE_METERING':V4L2_CID_EXPOSURE_METERING,
'V4L2_CID_SCENE_MODE':V4L2_CID_SCENE_MODE,
'V4L2_CID_3A_LOCK':V4L2_CID_3A_LOCK,
'V4L2_CID_AUTO_FOCUS_START':V4L2_CID_AUTO_FOCUS_START,
'V4L2_CID_AUTO_FOCUS_STOP':V4L2_CID_AUTO_FOCUS_STOP,
'V4L2_CID_AUTO_FOCUS_STATUS':V4L2_CID_AUTO_FOCUS_STATUS,
'V4L2_CID_AUTO_FOCUS_RANGE':V4L2_CID_AUTO_FOCUS_RANGE,
'V4L2_CID_PAN_SPEED':V4L2_CID_PAN_SPEED,
'V4L2_CID_TILT_SPEED':V4L2_CID_TILT_SPEED,
'V4L2_CID_FM_TX_CLASS_BASE':V4L2_CID_FM_TX_CLASS_BASE,
'V4L2_CID_FM_TX_CLASS':V4L2_CID_FM_TX_CLASS,
'V4L2_CID_RDS_TX_DEVIATION':V4L2_CID_RDS_TX_DEVIATION,
'V4L2_CID_RDS_TX_PI':V4L2_CID_RDS_TX_PI,
'V4L2_CID_RDS_TX_PTY':V4L2_CID_RDS_TX_PTY,
'V4L2_CID_RDS_TX_PS_NAME':V4L2_CID_RDS_TX_PS_NAME,
'V4L2_CID_RDS_TX_RADIO_TEXT':V4L2_CID_RDS_TX_RADIO_TEXT,
'V4L2_CID_RDS_TX_MONO_STEREO':V4L2_CID_RDS_TX_MONO_STEREO,
'V4L2_CID_RDS_TX_ARTIFICIAL_HEAD':V4L2_CID_RDS_TX_ARTIFICIAL_HEAD,
'V4L2_CID_RDS_TX_COMPRESSED':V4L2_CID_RDS_TX_COMPRESSED,
'V4L2_CID_RDS_TX_DYNAMIC_PTY':V4L2_CID_RDS_TX_DYNAMIC_PTY,
'V4L2_CID_RDS_TX_TRAFFIC_ANNOUNCEMENT':V4L2_CID_RDS_TX_TRAFFIC_ANNOUNCEMENT,
'V4L2_CID_RDS_TX_TRAFFIC_PROGRAM':V4L2_CID_RDS_TX_TRAFFIC_PROGRAM,
'V4L2_CID_RDS_TX_MUSIC_SPEECH':V4L2_CID_RDS_TX_MUSIC_SPEECH,
'V4L2_CID_RDS_TX_ALT_FREQS_ENABLE':V4L2_CID_RDS_TX_ALT_FREQS_ENABLE,
'V4L2_CID_RDS_TX_ALT_FREQS':V4L2_CID_RDS_TX_ALT_FREQS,
'V4L2_CID_AUDIO_LIMITER_ENABLED':V4L2_CID_AUDIO_LIMITER_ENABLED,
'V4L2_CID_AUDIO_LIMITER_RELEASE_TIME':V4L2_CID_AUDIO_LIMITER_RELEASE_TIME,
'V4L2_CID_AUDIO_LIMITER_DEVIATION':V4L2_CID_AUDIO_LIMITER_DEVIATION,
'V4L2_CID_AUDIO_COMPRESSION_ENABLED':V4L2_CID_AUDIO_COMPRESSION_ENABLED,
'V4L2_CID_AUDIO_COMPRESSION_GAIN':V4L2_CID_AUDIO_COMPRESSION_GAIN,
'V4L2_CID_AUDIO_COMPRESSION_THRESHOLD':V4L2_CID_AUDIO_COMPRESSION_THRESHOLD,
'V4L2_CID_AUDIO_COMPRESSION_ATTACK_TIME':V4L2_CID_AUDIO_COMPRESSION_ATTACK_TIME,
'V4L2_CID_AUDIO_COMPRESSION_RELEASE_TIME':V4L2_CID_AUDIO_COMPRESSION_RELEASE_TIME,
'V4L2_CID_PILOT_TONE_ENABLED':V4L2_CID_PILOT_TONE_ENABLED,
'V4L2_CID_PILOT_TONE_DEVIATION':V4L2_CID_PILOT_TONE_DEVIATION,
'V4L2_CID_PILOT_TONE_FREQUENCY':V4L2_CID_PILOT_TONE_FREQUENCY,
'V4L2_CID_TUNE_PREEMPHASIS':V4L2_CID_TUNE_PREEMPHASIS,
'V4L2_CID_TUNE_POWER_LEVEL':V4L2_CID_TUNE_POWER_LEVEL,
'V4L2_CID_TUNE_ANTENNA_CAPACITOR':V4L2_CID_TUNE_ANTENNA_CAPACITOR,
'V4L2_CID_FLASH_CLASS_BASE':V4L2_CID_FLASH_CLASS_BASE,
'V4L2_CID_FLASH_CLASS':V4L2_CID_FLASH_CLASS,
'V4L2_CID_FLASH_LED_MODE':V4L2_CID_FLASH_LED_MODE,
'V4L2_CID_FLASH_STROBE_SOURCE':V4L2_CID_FLASH_STROBE_SOURCE,
'V4L2_CID_FLASH_STROBE':V4L2_CID_FLASH_STROBE,
'V4L2_CID_FLASH_STROBE_STOP':V4L2_CID_FLASH_STROBE_STOP,
'V4L2_CID_FLASH_STROBE_STATUS':V4L2_CID_FLASH_STROBE_STATUS,
'V4L2_CID_FLASH_TIMEOUT':V4L2_CID_FLASH_TIMEOUT,
'V4L2_CID_FLASH_INTENSITY':V4L2_CID_FLASH_INTENSITY,
'V4L2_CID_FLASH_TORCH_INTENSITY':V4L2_CID_FLASH_TORCH_INTENSITY,
'V4L2_CID_FLASH_INDICATOR_INTENSITY':V4L2_CID_FLASH_INDICATOR_INTENSITY,
'V4L2_CID_FLASH_FAULT':V4L2_CID_FLASH_FAULT,
'V4L2_CID_FLASH_CHARGE':V4L2_CID_FLASH_CHARGE,
'V4L2_CID_FLASH_READY':V4L2_CID_FLASH_READY,
'V4L2_CID_JPEG_CLASS_BASE':V4L2_CID_JPEG_CLASS_BASE,
'V4L2_CID_JPEG_CLASS':V4L2_CID_JPEG_CLASS,
'V4L2_CID_JPEG_CHROMA_SUBSAMPLING':V4L2_CID_JPEG_CHROMA_SUBSAMPLING,
'V4L2_CID_JPEG_RESTART_INTERVAL':V4L2_CID_JPEG_RESTART_INTERVAL,
'V4L2_CID_JPEG_COMPRESSION_QUALITY':V4L2_CID_JPEG_COMPRESSION_QUALITY,
'V4L2_CID_JPEG_ACTIVE_MARKER':V4L2_CID_JPEG_ACTIVE_MARKER,
'V4L2_CID_IMAGE_SOURCE_CLASS_BASE':V4L2_CID_IMAGE_SOURCE_CLASS_BASE,
'V4L2_CID_IMAGE_SOURCE_CLASS':V4L2_CID_IMAGE_SOURCE_CLASS,
'V4L2_CID_VBLANK':V4L2_CID_VBLANK,
'V4L2_CID_HBLANK':V4L2_CID_HBLANK,
'V4L2_CID_ANALOGUE_GAIN':V4L2_CID_ANALOGUE_GAIN,
'V4L2_CID_TEST_PATTERN_RED':V4L2_CID_TEST_PATTERN_RED,
'V4L2_CID_TEST_PATTERN_GREENR':V4L2_CID_TEST_PATTERN_GREENR,
'V4L2_CID_TEST_PATTERN_BLUE':V4L2_CID_TEST_PATTERN_BLUE,
'V4L2_CID_TEST_PATTERN_GREENB':V4L2_CID_TEST_PATTERN_GREENB,
'V4L2_CID_MIPI_LANES':V4L2_CID_MIPI_LANES,
'V4L2_CID_WDR_MODE':V4L2_CID_WDR_MODE,
'V4L2_CID_PWM_DUTY':V4L2_CID_PWM_DUTY,
'V4L2_CID_IMAGE_PROC_CLASS_BASE':V4L2_CID_IMAGE_PROC_CLASS_BASE,
'V4L2_CID_IMAGE_PROC_CLASS':V4L2_CID_IMAGE_PROC_CLASS,
'V4L2_CID_LINK_FREQ':V4L2_CID_LINK_FREQ,
'V4L2_CID_PIXEL_RATE':V4L2_CID_PIXEL_RATE,
'V4L2_CID_TEST_PATTERN':V4L2_CID_TEST_PATTERN,
'V4L2_CID_DEINTERLACING_MODE':V4L2_CID_DEINTERLACING_MODE,
'V4L2_CID_DIGITAL_GAIN':V4L2_CID_DIGITAL_GAIN,
'V4L2_CID_DV_CLASS_BASE':V4L2_CID_DV_CLASS_BASE,
'V4L2_CID_DV_CLASS':V4L2_CID_DV_CLASS,
'V4L2_CID_DV_TX_HOTPLUG':V4L2_CID_DV_TX_HOTPLUG,
'V4L2_CID_DV_TX_RXSENSE':V4L2_CID_DV_TX_RXSENSE,
'V4L2_CID_DV_TX_EDID_PRESENT':V4L2_CID_DV_TX_EDID_PRESENT,
'V4L2_CID_DV_TX_MODE':V4L2_CID_DV_TX_MODE,
'V4L2_CID_DV_TX_RGB_RANGE':V4L2_CID_DV_TX_RGB_RANGE,
'V4L2_CID_DV_TX_IT_CONTENT_TYPE':V4L2_CID_DV_TX_IT_CONTENT_TYPE,
'V4L2_CID_DV_RX_POWER_PRESENT':V4L2_CID_DV_RX_POWER_PRESENT,
'V4L2_CID_DV_RX_RGB_RANGE':V4L2_CID_DV_RX_RGB_RANGE,
'V4L2_CID_DV_RX_IT_CONTENT_TYPE':V4L2_CID_DV_RX_IT_CONTENT_TYPE,
'V4L2_CID_FM_RX_CLASS_BASE':V4L2_CID_FM_RX_CLASS_BASE,
'V4L2_CID_FM_RX_CLASS':V4L2_CID_FM_RX_CLASS,
'V4L2_CID_TUNE_DEEMPHASIS':V4L2_CID_TUNE_DEEMPHASIS,
'V4L2_CID_RDS_RECEPTION':V4L2_CID_RDS_RECEPTION,
'V4L2_CID_RDS_RX_PTY':V4L2_CID_RDS_RX_PTY,
'V4L2_CID_RDS_RX_PS_NAME':V4L2_CID_RDS_RX_PS_NAME,
'V4L2_CID_RDS_RX_RADIO_TEXT':V4L2_CID_RDS_RX_RADIO_TEXT,
'V4L2_CID_RDS_RX_TRAFFIC_ANNOUNCEMENT':V4L2_CID_RDS_RX_TRAFFIC_ANNOUNCEMENT,
'V4L2_CID_RDS_RX_TRAFFIC_PROGRAM':V4L2_CID_RDS_RX_TRAFFIC_PROGRAM,
'V4L2_CID_RDS_RX_MUSIC_SPEECH':V4L2_CID_RDS_RX_MUSIC_SPEECH,
'V4L2_CID_RF_TUNER_CLASS_BASE':V4L2_CID_RF_TUNER_CLASS_BASE,
'V4L2_CID_RF_TUNER_CLASS':V4L2_CID_RF_TUNER_CLASS,
'V4L2_CID_RF_TUNER_BANDWIDTH_AUTO':V4L2_CID_RF_TUNER_BANDWIDTH_AUTO,
'V4L2_CID_RF_TUNER_BANDWIDTH':V4L2_CID_RF_TUNER_BANDWIDTH,
'V4L2_CID_RF_TUNER_RF_GAIN':V4L2_CID_RF_TUNER_RF_GAIN,
'V4L2_CID_RF_TUNER_LNA_GAIN_AUTO':V4L2_CID_RF_TUNER_LNA_GAIN_AUTO,
'V4L2_CID_RF_TUNER_LNA_GAIN':V4L2_CID_RF_TUNER_LNA_GAIN,
'V4L2_CID_RF_TUNER_MIXER_GAIN_AUTO':V4L2_CID_RF_TUNER_MIXER_GAIN_AUTO,
'V4L2_CID_RF_TUNER_MIXER_GAIN':V4L2_CID_RF_TUNER_MIXER_GAIN,
'V4L2_CID_RF_TUNER_IF_GAIN_AUTO':V4L2_CID_RF_TUNER_IF_GAIN_AUTO,
'V4L2_CID_RF_TUNER_IF_GAIN':V4L2_CID_RF_TUNER_IF_GAIN,
'V4L2_CID_RF_TUNER_PLL_LOCK':V4L2_CID_RF_TUNER_PLL_LOCK,
'V4L2_CID_DETECT_CLASS_BASE':V4L2_CID_DETECT_CLASS_BASE,
'V4L2_CID_DETECT_CLASS':V4L2_CID_DETECT_CLASS,
'V4L2_CID_DETECT_MD_MODE':V4L2_CID_DETECT_MD_MODE,
'V4L2_CID_DETECT_MD_GLOBAL_THRESHOLD':V4L2_CID_DETECT_MD_GLOBAL_THRESHOLD,
'V4L2_CID_DETECT_MD_THRESHOLD_GRID':V4L2_CID_DETECT_MD_THRESHOLD_GRID,
'V4L2_CID_DETECT_MD_REGION_GRID':V4L2_CID_DETECT_MD_REGION_GRID,
'V4L2_CID_MAX_CTRLS':V4L2_CID_MAX_CTRLS,
'V4L2_CID_PRIVATE_BASE':V4L2_CID_PRIVATE_BASE,
}
##
fmt ={
	"RGB332": (V4L2_PIX_FMT_RGB332, 1),
	"RGB444": (V4L2_PIX_FMT_RGB444, 1),
	"ARGB444": (V4L2_PIX_FMT_ARGB444, 1),
	"XRGB444": (V4L2_PIX_FMT_XRGB444, 1),
	"RGB555": (V4L2_PIX_FMT_RGB555, 1),
	"ARGB555": (V4L2_PIX_FMT_ARGB555, 1),
	"XRGB555": (V4L2_PIX_FMT_XRGB555, 1),
	"RGB565": (V4L2_PIX_FMT_RGB565, 1),
	"RGB555X": (V4L2_PIX_FMT_RGB555X, 1),
	"RGB565X": (V4L2_PIX_FMT_RGB565X, 1),
	"BGR666": (V4L2_PIX_FMT_BGR666, 1),
	"BGR24": (V4L2_PIX_FMT_BGR24, 1),
	"RGB24": (V4L2_PIX_FMT_RGB24, 1),
	"BGR32": (V4L2_PIX_FMT_BGR32, 1),
	"ABGR32": (V4L2_PIX_FMT_ABGR32, 1),
	"XBGR32": (V4L2_PIX_FMT_XBGR32, 1),
	"RGB32": (V4L2_PIX_FMT_RGB32, 1),
	"ARGB32": (V4L2_PIX_FMT_ARGB32, 1),
	"XRGB32": (V4L2_PIX_FMT_XRGB32, 1),
	"HSV24": (V4L2_PIX_FMT_HSV24, 1),
	"HSV32": (V4L2_PIX_FMT_HSV32, 1),
	"Y8": (V4L2_PIX_FMT_GREY, 1),
	"Y10": (V4L2_PIX_FMT_Y10, 1),
	"Y12": (V4L2_PIX_FMT_Y12, 1),
	"Y16": (V4L2_PIX_FMT_Y16, 1),
	"UYVY": (V4L2_PIX_FMT_UYVY, 1),
	"VYUY": (V4L2_PIX_FMT_VYUY, 1),
	"YUYV": (V4L2_PIX_FMT_YUYV, 1),
	"YVYU": (V4L2_PIX_FMT_YVYU, 1),
	"NV12": (V4L2_PIX_FMT_NV12, 1),
	"NV12M": (V4L2_PIX_FMT_NV12M, 2),
	"NV21": (V4L2_PIX_FMT_NV21, 1),
	"NV21M": (V4L2_PIX_FMT_NV21M, 2),
	"NV16": (V4L2_PIX_FMT_NV16, 1),
	"NV16M": (V4L2_PIX_FMT_NV16M, 2),
	"NV61": (V4L2_PIX_FMT_NV61, 1),
	"NV61M": (V4L2_PIX_FMT_NV61M, 2),
	"NV24": (V4L2_PIX_FMT_NV24, 1),
	"NV42": (V4L2_PIX_FMT_NV42, 1),
	"YUV420M": (V4L2_PIX_FMT_YUV420M, 3),
	"YUV422M": (V4L2_PIX_FMT_YUV422M, 3),
	"YUV444M": (V4L2_PIX_FMT_YUV444M, 3),
	"YVU420M": (V4L2_PIX_FMT_YVU420M, 3),
	"YVU422M": (V4L2_PIX_FMT_YVU422M, 3),
	"YVU444M": (V4L2_PIX_FMT_YVU444M, 3),
	"SBGGR8": (V4L2_PIX_FMT_SBGGR8, 1),
	"SGBRG8": (V4L2_PIX_FMT_SGBRG8, 1),
	"SGRBG8": (V4L2_PIX_FMT_SGRBG8, 1),
	"SRGGB8": (V4L2_PIX_FMT_SRGGB8, 1),
	"SBGGR10_DPCM8": (V4L2_PIX_FMT_SBGGR10DPCM8, 1),
	"SGBRG10_DPCM8": (V4L2_PIX_FMT_SGBRG10DPCM8, 1),
	"SGRBG10_DPCM8": (V4L2_PIX_FMT_SGRBG10DPCM8, 1),
	"SRGGB10_DPCM8": (V4L2_PIX_FMT_SRGGB10DPCM8, 1),
	"SBGGR10": (V4L2_PIX_FMT_SBGGR10, 1),
	"SGBRG10": (V4L2_PIX_FMT_SGBRG10, 1),
	"SGRBG10": (V4L2_PIX_FMT_SGRBG10, 1),
	"SRGGB10": (V4L2_PIX_FMT_SRGGB10, 1),
	"SBGGR10P": (V4L2_PIX_FMT_SBGGR10P, 1),
	"SGBRG10P": (V4L2_PIX_FMT_SGBRG10P, 1),
	"SGRBG10P": (V4L2_PIX_FMT_SGRBG10P, 1),
	"SRGGB10P": (V4L2_PIX_FMT_SRGGB10P, 1),
	"SBGGR12": (V4L2_PIX_FMT_SBGGR12, 1),
	"SGBRG12": (V4L2_PIX_FMT_SGBRG12, 1),
	"SGRBG12": (V4L2_PIX_FMT_SGRBG12, 1),
	"SRGGB12": (V4L2_PIX_FMT_SRGGB12, 1),
	"DV": (V4L2_PIX_FMT_DV, 1),
	"MJPEG": (V4L2_PIX_FMT_MJPEG, 1),
	"MPEG": (V4L2_PIX_FMT_MPEG, 1),
}

def list_formats():
    for i in fmt.items():
        print ("%s (%s, %d plane(s))"% (i[0], v4l2_get_fmt(i[1][0]), i[1][1]))

def v4l2_format_by_fourcc(fourcc):
    for i in fmt.items():
        if i[1][0] == fourcc:
            return i
    return None

def v4l2_format_by_name(name):
    for i in fmt.items():
        if i[0] == name:
            return i
    return None

fields = {
	"any": V4L2_FIELD_ANY,
	"none": V4L2_FIELD_NONE,
	"top": V4L2_FIELD_TOP,
	"bottom": V4L2_FIELD_BOTTOM,
	"interlaced": V4L2_FIELD_INTERLACED,
	"seq-tb": V4L2_FIELD_SEQ_TB,
	"seq-bt": V4L2_FIELD_SEQ_BT,
	"alternate": V4L2_FIELD_ALTERNATE,
	"interlaced-tb": V4L2_FIELD_INTERLACED_TB,
	"interlaced-bt": V4L2_FIELD_INTERLACED_BT,
}

def v4l2_field_name(field):
    for i in fields.items():
        if i[1] == field:
            return i[0]
    return "Unkown"

